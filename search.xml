<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Aspect获取第三方jar包的切面</title>
      <link href="2020/11/19/aspect-huo-qu-di-san-fang-jar-bao-de-qie-mian/"/>
      <url>2020/11/19/aspect-huo-qu-di-san-fang-jar-bao-de-qie-mian/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在之前总以为<code>Aspect</code>的使用场景有限，只能获取项目内类的切面，原来并非如此。</p></blockquote><h2 id="1-引入依赖"><a href="#1-引入依赖" class="headerlink" title="1. 引入依赖"></a>1. 引入依赖</h2><p>在项目中引用相关依赖</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.aspectj<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>aspectjrt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.8.13<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.aspectj<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>aspectjweaver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.9.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.codehaus.mojo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>aspectj-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>complianceLevel</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>complianceLevel</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>source</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">></span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-编写Aspect表达式"><a href="#2-编写Aspect表达式" class="headerlink" title="2. 编写Aspect表达式"></a>2. 编写<code>Aspect</code>表达式</h2><p>举例</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> io<span class="token punctuation">.</span>github<span class="token punctuation">.</span>iamazy<span class="token punctuation">.</span>example<span class="token punctuation">;</span><span class="token annotation punctuation">@Aspect</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogAspect</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"annotation(io.github.iamazy.demo.Logger)"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">log</span><span class="token punctuation">(</span>Proceedingjoinpoint joinpoint<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// log action</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中<code>io.github.iamazy.demo.Logger</code>是第三方依赖中的注解，且第三方依赖依赖使用了这个注解</p><h2 id="3-编写aop-xml文件"><a href="#3-编写aop-xml文件" class="headerlink" title="3. 编写aop.xml文件"></a>3. 编写aop.xml文件</h2><pre class="line-numbers language-xml"><code class="language-xml"><span class="token doctype">&lt;!DOCTYPE aspectj PUBLIC "-//AspectJ//DTD//EN" "http://www.eclipse.org/aspectj/dtd/aspect.dtd></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>aspectj</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>weaver</span> <span class="token attr-name">options</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>-verbose<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">within</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>io.github.iamazy.action.*<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>weaver</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>aspects</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>aspect</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>io.github.iamazy.example.LogAspect<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>aspects</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>aspectj</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中<code>io.github.iamazy.action.*</code>就是第三方依赖中使用<code>io.github.iamazy.demo.Logger</code>注解的路径，如果有多个，继续添加<code>&lt;include/&gt;</code>即可。</p><h2 id="4-启动项目"><a href="#4-启动项目" class="headerlink" title="4. 启动项目"></a>4. 启动项目</h2><p>在启动项目时，需要指定<code>VM参数</code>，如果是部署项目，可以写在shell脚本中。</p><pre class="line-numbers language-shell"><code class="language-shell">-javaagent: /path/aspectweaver-1.9.6.jar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>最后你就会惊奇的发现，真的可以获取第三方依赖的切面，然后搞搞事情！！！</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> aspect </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> aspect </tag>
            
            <tag> aop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>追梦少年</title>
      <link href="2020/09/17/zhui-meng-shao-nian/"/>
      <url>2020/09/17/zhui-meng-shao-nian/</url>
      
        <content type="html"><![CDATA[<center><h2 id="追梦少年"><a href="#追梦少年" class="headerlink" title="追梦少年"></a>追梦少年</h2><p>我踏进一片梦想的海<br>遥望那无尽的边界<br>汹涌的海水波涛澎湃<br>我的心儿微起漪涟  </p><p>那是一片怎样广阔的天<br>天空的云朵在绽放怎样的笑脸<br>飘逸的风儿呼啸而过<br>荡漾在空中飞舞绵延  </p><p>这是一个彩色的世界<br>青青的草地和低舞的蝴蝶<br>梦幻般的花朵装扮着鲜艳<br>你我仿佛回到那个纯真的童年  </p><p>一天天   一年年<br>梦想在我们的陶醉中走远<br>难割舍的是呼吸   丢不掉的是眷念<br>风儿吹过   仿佛又回到相遇的那个夏天  </p><p>不要害怕失败   不要停止向前<br>天仍旧很蓝   梦依然很甜<br>等待时光流逝   岁月变迁<br>我想我们还是<br>那个傻里傻气   勇敢执着的少年  </p></center><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 诗歌 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗词 </tag>
            
            <tag> 原创 </tag>
            
            <tag> 19岁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>向高三宣战</title>
      <link href="2020/09/17/xiang-gao-san-xuan-zhan/"/>
      <url>2020/09/17/xiang-gao-san-xuan-zhan/</url>
      
        <content type="html"><![CDATA[<center><h2 id="向高三宣战"><a href="#向高三宣战" class="headerlink" title="向高三宣战"></a>向高三宣战</h2><p>我知道天空很蓝  我的梦想不会黯淡<br>我知道海岸辽阔  不会阻断我梦的翅膀  </p><p>咸鱼翻身  那再也不是一条遥远的路<br>飞流直上  我已经看见那逼近的光芒  </p><p>蜀道荆棘  比不上高考途中的长路漫漫<br>黄河奔腾  又哪有考场上的势局紧张  </p><p>天堂,我们上  地狱,我们闯<br>我们拼搏  我们歌唱  我们略带着那么一点点嚣张  </p><p>风萧萧  易水寒  一年之后再见谁笑与谁伤<br>365天已经不再完整  眼看万马驰骋  又在争夺谁的天下  </p><p>梦想是直流挺进的帆  是大雨倾盆而下的痴狂<br>追求是布满荆棘的路  是刻着辛劳与卓越的印章  </p><p>踏上高三  千万别慌<br>在这条充满迷茫的路上  我们有谁陪伴<br>又有谁在为我们鼓掌  </p><p>夸奖,光环  我们都不能因之骄傲自满<br>悲伤,惆怅  也不能受到他们的打击  肆意颓唐  </p><p>不到最后一刻  我们不能气馁<br>不到最后一秒  我们都要继续疯狂  </p><p>我们要始终坚信<br>高考有多狠   我们就有多强  </p></center><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 诗歌 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗词 </tag>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读书郎</title>
      <link href="2020/09/17/du-shu-lang/"/>
      <url>2020/09/17/du-shu-lang/</url>
      
        <content type="html"><![CDATA[<center><h2 id="读书郎"><a href="#读书郎" class="headerlink" title="读书郎"></a>读书郎</h2><p>慌<br>受伤<br>更作读<br>以书为伴<br>半夜抬头看<br>稀稀攘攘灯光<br>读书十年寒窗苦<br>只为考试一场<br>师生情深意长<br>一年相处两世难忘<br>天天欢笑到神伤<br>人生路漫漫长<br>残风冷月伴<br>莘莘学子<br>说不尽<br>不爽<br>残 </p></center><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 诗歌 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗词 </tag>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>杂诗</title>
      <link href="2020/09/17/mei-li-yi-yi-04/"/>
      <url>2020/09/17/mei-li-yi-yi-04/</url>
      
        <content type="html"><![CDATA[<center><h2 id="杂诗"><a href="#杂诗" class="headerlink" title="杂诗"></a>杂诗</h2><p>无定河边暮角声<br>赫连台畔旅人情<br>函关旧路千余里<br>一夕秋风白发生  </p><h2 id="魅力意译"><a href="#魅力意译" class="headerlink" title="魅力意译"></a>魅力意译</h2><p>无定河浪滔滔  暮色苍茫<br>号角声声  冷风呼啸<br>没有月亮的夜晚<br>是谁与赫连台一起站到苍老？<br>为了食不果腹衣不蔽体的一家老小<br>走上了这条不归的谋生之道<br>亲历连天烽火<br>冒着雪剑霜刀<br>父母可健在<br>妻儿可安好<br>多少次梦回家中<br>听父母温馨唠叨<br>看妻子揽镜自照<br>任儿女膝下撒娇<br>一觉醒来<br>才发现与故乡相隔千里<br>仅仅一个晚上的秋风<br>吹得头上的青丝变成了雪花<br>飘飘飘飘  </p><center></center></center><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 魅力意译 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗词 </tag>
            
            <tag> 意译 </tag>
            
            <tag> 摘录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>贺新郎 - 寄李伯纪丞相</title>
      <link href="2020/09/17/mei-li-yi-yi-03/"/>
      <url>2020/09/17/mei-li-yi-yi-03/</url>
      
        <content type="html"><![CDATA[<center><h2 id="贺新郎-寄李伯纪丞相"><a href="#贺新郎-寄李伯纪丞相" class="headerlink" title="贺新郎 - 寄李伯纪丞相"></a>贺新郎 - 寄李伯纪丞相</h2><p>曳杖危楼去，斗垂天，沧波万顷，月流烟渚。<br>扫尽浮云风不定，未放扁舟夜渡。宿雁落寒芦深处。<br>怅望关河空吊影，正人间鼻息鼍鼓。谁伴我，醉中舞？  </p><p>十年一梦扬州路。倚高寒,愁生故国，气吞骄虏。<br>要斩楼兰三尺剑，遗恨琵琶旧语。谩暗涩铜华尘土。<br>唤取谪仙平章看，过苕溪尚许垂纶否？风浩荡，欲飞举。  </p><h2 id="魅力意译"><a href="#魅力意译" class="headerlink" title="魅力意译"></a>魅力意译</h2><p>曳杖独立高楼，眺望不眠的星斗。<br>耳畔是沧桑的波涛，如水的明月，<br>流泻在烟雾缭绕的江中小舟。<br>风向谁能定，浮云何处留。<br>谁在挥动阴霾的巨手？<br>风急浪高，谁人敢弄舟。<br>只有昨夜的大雁，今夜在寒冷的芦苇深处逗留。<br>怅望冷落关河，谁的影子在徘徊，<br>谁在梦里鼾声稠？<br>谁在枕戈待旦敲战鼓，<br>谁在伴我醉里挥剑舞清秋？<br>十年仅一梦，关乎扬州路。<br>高处不胜寒，故国处处愁。<br>手提三尺剑，斩杀楼兰吞敌寇，<br>尘土飞扬悲壮。<br>黯淡了岁月锈蚀了铠甲，直教谪仙俯首。<br>清清苕溪上，乘兴垂钓钩，<br>鱼化蛟龙欲飞去，<br>浩荡之风起神州。  </p></center><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 魅力意译 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗词 </tag>
            
            <tag> 意译 </tag>
            
            <tag> 摘录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>登高</title>
      <link href="2020/09/17/mei-li-yi-yi-02/"/>
      <url>2020/09/17/mei-li-yi-yi-02/</url>
      
        <content type="html"><![CDATA[<center><h2 id="登高"><a href="#登高" class="headerlink" title="登高"></a>登高</h2><p>风急天高猿啸哀，渚清沙白鸟飞回。<br>无边落木萧萧下，不尽长江滚滚来。<br>万里悲秋常作客，百年多病独登台。<br>艰难苦恨繁霜鬓，潦倒新停浊酒杯。  </p><h2 id="魅力意译"><a href="#魅力意译" class="headerlink" title="魅力意译"></a>魅力意译</h2><p>寒风在空中飞驰凛冽<br>猿猴在绝壁上仰身啸天<br>水中高地清沙弥漫<br>放飞的鸟儿在风中低舞盘旋<br>那飘飘而下的落叶<br>是我对妻儿深深的思念<br>在那奔腾呼啸的江边<br>写满了我对国家命运的挂牵<br>万里征途说不尽客居他乡的辛酸无限<br>多病的身躯却酿就了一部部脍炙人口的伟大诗篇<br>在那斑驳的月夜<br>独倚在江边<br>拿起熟悉的酒杯<br>狠狠地摔碎<br>立下誓言<br>我将逐波踏浪   奋勇向前<br>去追寻我的理想   追逐我的明天  </p></center><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 魅力意译 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗词 </tag>
            
            <tag> 原创 </tag>
            
            <tag> 意译 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>锦瑟</title>
      <link href="2020/09/17/mei-li-yi-yi-01/"/>
      <url>2020/09/17/mei-li-yi-yi-01/</url>
      
        <content type="html"><![CDATA[<center><h2 id="锦瑟"><a href="#锦瑟" class="headerlink" title="锦瑟"></a>锦瑟</h2><p>锦瑟无端五十弦<br>一弦一柱思华年<br>庄生晓梦迷蝴蝶<br>望帝春心托杜鹃<br>沧海月明珠有泪<br>蓝田日暖玉生烟<br>此情可待成追忆<br>只是当时已惘然  </p><h2 id="魅力意译"><a href="#魅力意译" class="headerlink" title="魅力意译"></a>魅力意译</h2><p>美丽的古瑟不会无由的有五十根弦<br>拨动这一根又一根的弦<br>无限的愁思寄托在上面,追溯到从前<br>遥想当年<br>庄周入梦幻化为蝶<br>徜徉在物我两忘的境界<br>杜鹃泣血<br>伤春之心却依然留恋昨天<br>那狂怒的大海  孤傲的明月<br>连那动人的泪珠都那么的明亮光鲜<br>而那最令人沉迷的留恋<br>却又如蓝田日暖  良玉生烟<br>可望而不可置于眉睫之前<br>满肚的苦楚  无处可诉<br>那旷世绝伦的爱恋 却俨然幻灭<br>难道非要我孤独无依 含恨终生<br>才对得起你的无私奉献<br>后来想想  才突然了解<br>这一切的一切<br>只不过是我们自己给自己套了一个圈  </p></center><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 魅力意译 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗词 </tag>
            
            <tag> 原创 </tag>
            
            <tag> 意译 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>address-already-in-use</title>
      <link href="2020/04/05/address-already-in-use/"/>
      <url>2020/04/05/address-already-in-use/</url>
      
        <content type="html"><![CDATA[<blockquote><p>上周遇到个熟悉的问题<code>Address already in use: bind</code>，本来以为是个简单的端口占用问题，没想到花了很长时间才解决，避免以后再次入坑，特此记录。</p></blockquote><h3 id="常规端口占用"><a href="#常规端口占用" class="headerlink" title="常规端口占用"></a>常规端口占用</h3><p>windows</p><blockquote><p>netstat -ano|findstr ${端口号}      #查找端口<br> taskkill /f /pid ${端口号}   #杀死进程</p></blockquote><p>Linux &amp; Mac</p><blockquote><p>lsof -i:${端口号}<br>kill -9 ${端口号}</p></blockquote><h3 id="Hyper-V保留端口"><a href="#Hyper-V保留端口" class="headerlink" title="Hyper-V保留端口"></a>Hyper-V保留端口</h3><p>这次遇到端口占用问题，是在笔记本被强制更新之后遇到的(Windows10系统)，用了上述的方法怎么也不好使，有人说用管理员执行<code>netsh winsock reset</code>，然后机器重启就行了。可是我执行后重启了5，6次，程序依然还是报<code>Address already in use: bind</code>。这时候我就比较迷惑了，一般说程序员3大法宝：<code>重启程序</code>，<code>重启电脑</code>，<code>重装系统</code>，没有什么是解决不了的。因为是公司电脑，重装系统是不可能的了。重启程序和电脑我试了不下10遍，问题依然存在，这时候人就比较慌了。</p><p>后来上Github搜索可能是<code>Hyper-V</code>的问题，按照<a href="https://github.com/docker/for-win/issues/3171" target="_blank" rel="noopener">issue: Unable to bind ports</a>的方式查看发现我程序的启动端口在<code>Hyper-V</code>的保留端口的范围之内，于是乎虽然端口没被占用，但是程序依然会报<code>Address already in use: bind</code>。于是把<code>Hyper-V</code>卸了，重启电脑问题解决。</p><h4 id="查找Hyper-V保留端口范围"><a href="#查找Hyper-V保留端口范围" class="headerlink" title="查找Hyper-V保留端口范围"></a>查找<code>Hyper-V</code>保留端口范围</h4><p>在<code>cmd</code>执行</p><blockquote><p>netsh interface ipv4 show excludedportrange protocol=tcp</p></blockquote><p>返回</p><pre><code>Protocol tcp Port Exclusion RangesStart Port    End Port----------    --------     49692       49791     49792       49891     49892       49991     49992       50091     50092       50191     50214       50313     50498       50597* - Administered port exclusions.</code></pre><h4 id="issue提供的解决方法"><a href="#issue提供的解决方法" class="headerlink" title="issue提供的解决方法"></a>issue提供的解决方法</h4><ol><li>禁用<code>Hyper-V</code>（需要2次重启）</li></ol><blockquote><p>dism.exe /Online /Disable-Feature:Microsoft-Hyper-V</p></blockquote><ol start="2"><li>重启结束之后，保留你想要的端口使<code>Hyper-V</code>无法占用该端口</li></ol><blockquote><p>netsh int ipv4 add excludedportrange protocol=tcp startport=50051 numberofports=1</p></blockquote><ol start="3"><li>重启<code>Hyper-V</code>（还是需要重启）</li></ol><blockquote><p>dism.exe /Online /Enable-Feature:Microsoft-Hyper-V /All</p></blockquote><p>然后你就会发现程序可以正常的启动了</p><p>因为我用不到<code>Hyper-V</code>，所以直接卸载了<code>Hyper-V</code>。</p><p>事后感叹：Windows更新真的很坑呀！！！ </p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 爬出深坑 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> address-already-in-use </tag>
            
            <tag> port </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java虚拟机指令集</title>
      <link href="2020/03/22/jvm-instructions/"/>
      <url>2020/03/22/jvm-instructions/</url>
      
        <content type="html"><![CDATA[<h3 id="aaload-50-0x32"><a href="#aaload-50-0x32" class="headerlink" title="aaload (50,0x32)"></a>aaload (50,0x32)</h3><blockquote><p>从数组中装载引用类型</p></blockquote><h4 id="1-操作数栈"><a href="#1-操作数栈" class="headerlink" title="1. 操作数栈"></a>1. 操作数栈</h4><blockquote><p>pop: <code>arrayref</code>,<code>index</code><br>push: <code>value</code>  </p></blockquote><p><code>arrayref</code>必须是引用类型<code>R[]</code>，并且必须指向元素为引用类型<code>R</code>的数组。索引必须是<code>int</code>类型。<br><code>arrayref</code>和<code>index</code>从操作数栈中弹出，数组中索引为<code>index</code>的引用值(<code>value</code>)被检索到并推入到操作数栈中。</p><h3 id="1-字节码解读示例"><a href="#1-字节码解读示例" class="headerlink" title="-1. 字节码解读示例"></a>-1. 字节码解读示例</h3><p>在main函数中声明一个长度为1的数组，并给索引为0的项赋值，然后根据索引0调用该值赋给某个变量。代码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> io<span class="token punctuation">.</span>github<span class="token punctuation">.</span>iamazy<span class="token punctuation">.</span>asm<span class="token punctuation">.</span>instructions<span class="token punctuation">.</span>aaload<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Aaload</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    String name <span class="token operator">=</span> <span class="token string">"aaload"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> objects <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        objects<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"hello asm"</span><span class="token punctuation">;</span>        Object object <span class="token operator">=</span> objects<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行main函数或执行<code>javac Aaload.java</code>生成<code>Aaload.class</code>文件，并在<code>Aaload.class</code>文件同级目录执行<code>javap -verbose Aaload</code>，生成如下字节码信息。</p><pre><code>Warning: File ./Aaload.class does not contain class AaloadClassfile /Users/iamazy/Documents/GitHub/asm-tutorial/target/classes/io/github/iamazy/asm/instructions/aaload/Aaload.class  Last modified Mar 22, 2020; size 804 bytes  SHA-256 checksum 7ebc42d18bc4fc81d44ab57f7492aa00e500f1a0fb02c2f71f8be359ca78d102  Compiled from "Aaload.java"public class io.github.iamazy.asm.instructions.aaload.Aaload implements java.io.Serializable  minor version: 0  major version: 52  flags: (0x0021) ACC_PUBLIC, ACC_SUPER  this_class: #8                          // io/github/iamazy/asm/instructions/aaload/Aaload  super_class: #4                         // java/lang/Object  interfaces: 1, fields: 1, methods: 2, attributes: 1Constant pool:   #1 = Methodref          #4.#29         // java/lang/Object."&lt;init&gt;":()V   #2 = String             #30            // aaload   #3 = Fieldref           #8.#31         // io/github/iamazy/asm/instructions/aaload/Aaload.name:Ljava/lang/String;   #4 = Class              #32            // java/lang/Object   #5 = String             #33            // hello asm   #6 = Fieldref           #34.#35        // java/lang/System.out:Ljava/io/PrintStream;   #7 = Methodref          #36.#37        // java/io/PrintStream.println:(Ljava/lang/Object;)V   #8 = Class              #38            // io/github/iamazy/asm/instructions/aaload/Aaload   #9 = Class              #39            // java/io/Serializable  #10 = Utf8               name  #11 = Utf8               Ljava/lang/String;  #12 = Utf8               &lt;init&gt;  #13 = Utf8               ()V  #14 = Utf8               Code  #15 = Utf8               LineNumberTable  #16 = Utf8               LocalVariableTable  #17 = Utf8               this  #18 = Utf8               Lio/github/iamazy/asm/instructions/aaload/Aaload;  #19 = Utf8               main  #20 = Utf8               ([Ljava/lang/String;)V  #21 = Utf8               args  #22 = Utf8               [Ljava/lang/String;  #23 = Utf8               objects  #24 = Utf8               [Ljava/lang/Object;  #25 = Utf8               object  #26 = Utf8               Ljava/lang/Object;  #27 = Utf8               SourceFile  #28 = Utf8               Aaload.java  #29 = NameAndType        #12:#13        // "&lt;init&gt;":()V  #30 = Utf8               aaload  #31 = NameAndType        #10:#11        // name:Ljava/lang/String;  #32 = Utf8               java/lang/Object  #33 = Utf8               hello asm  #34 = Class              #40            // java/lang/System  #35 = NameAndType        #41:#42        // out:Ljava/io/PrintStream;  #36 = Class              #43            // java/io/PrintStream  #37 = NameAndType        #44:#45        // println:(Ljava/lang/Object;)V  #38 = Utf8               io/github/iamazy/asm/instructions/aaload/Aaload  #39 = Utf8               java/io/Serializable  #40 = Utf8               java/lang/System  #41 = Utf8               out  #42 = Utf8               Ljava/io/PrintStream;  #43 = Utf8               java/io/PrintStream  #44 = Utf8               println  #45 = Utf8               (Ljava/lang/Object;)V{  java.lang.String name;    descriptor: Ljava/lang/String;    flags: (0x0000)  public io.github.iamazy.asm.instructions.aaload.Aaload();    descriptor: ()V    flags: (0x0001) ACC_PUBLIC    Code:      stack=2, locals=1, args_size=1         0: aload_0         1: invokespecial #1                  // Method java/lang/Object."&lt;init&gt;":()V         4: aload_0         5: ldc           #2                  // String aaload         7: putfield      #3                  // Field name:Ljava/lang/String;        10: return      LineNumberTable:        line 5: 0        line 7: 4      LocalVariableTable:        Start  Length  Slot  Name   Signature            0      11     0  this   Lio/github/iamazy/asm/instructions/aaload/Aaload;  public static void main(java.lang.String[]);    descriptor: ([Ljava/lang/String;)V    flags: (0x0009) ACC_PUBLIC, ACC_STATIC    Code:      stack=3, locals=3, args_size=1         0: iconst_1         1: anewarray     #4                  // class java/lang/Object         4: astore_1         5: aload_1         6: iconst_0         7: ldc           #5                  // String hello asm         9: aastore        10: aload_1        11: iconst_0        12: aaload        13: astore_2        14: getstatic     #6                  // Field java/lang/System.out:Ljava/io/PrintStream;        17: aload_2        18: invokevirtual #7                  // Method java/io/PrintStream.println:(Ljava/lang/Object;)V        21: return      LineNumberTable:        line 10: 0        line 11: 5        line 12: 10        line 13: 14        line 14: 21      LocalVariableTable:        Start  Length  Slot  Name   Signature            0      22     0  args   [Ljava/lang/String;            5      17     1 objects   [Ljava/lang/Object;           14       8     2 object   Ljava/lang/Object;}SourceFile: "Aaload.java"</code></pre><p>有上述信息可知：</p><h5 id="1-指定class文件格式版本号"><a href="#1-指定class文件格式版本号" class="headerlink" title="1. 指定class文件格式版本号"></a>1. 指定class文件格式版本号</h5><p>Aaload.class文件的class文件格式版本号是52.0  </p><h5 id="2-显示类访问标记符的值"><a href="#2-显示类访问标记符的值" class="headerlink" title="2. 显示类访问标记符的值"></a>2. 显示类访问标记符的值</h5><p>类的<code>access_flags</code>为<code>ACC_PUBLIC+ACC_SUPER</code>=<code>0x0001+0x0020</code>=<code>0x0021</code>  (ACC_XXX对应的值见<a href="https://iamazy.github.io/2020/03/17/jdk-class-file/">access_flags</a>)  </p><h5 id="3-显示类的基本信息"><a href="#3-显示类的基本信息" class="headerlink" title="3. 显示类的基本信息"></a>3. 显示类的基本信息</h5><p>interfaces: 1 (impl <code>Serializable</code>), fields: 1 (<code>name</code>), methods: 2 (<code>&lt;init&gt;</code>,<code>main</code>), attributes: 1 ()  </p><h5 id="4-显示了常量池中具体的信息"><a href="#4-显示了常量池中具体的信息" class="headerlink" title="4. 显示了常量池中具体的信息"></a>4. 显示了常量池中具体的信息</h5><p>如常量池第一行</p><blockquote><p><code>#1 = Methodref          #4.#29         // java/lang/Object."&lt;init&gt;":()V</code>  </p></blockquote><p>含义：常量池中第一项的类型为<code>CONSTANT_Methodref_info</code>，它的值是<code>#4.#29</code>(往下找第4项和第29项)，即<code>java/lang/Object."&lt;init&gt;":()V</code></p><h5 id="5-类函数的执行过程"><a href="#5-类函数的执行过程" class="headerlink" title="5. 类函数的执行过程"></a>5. 类函数的执行过程</h5><p>在生成的<code>Aaload.class</code>文件中，有两个函数，一个是类<code>Aaload</code>的无参构造函数，一个是程序入口<code>main</code>函数。</p><ol><li><p><code>Aaload</code>的无参构造函数对应的字节码信息</p><pre><code>public io.github.iamazy.asm.instructions.aaload.Aaload(); descriptor: ()V flags: (0x0001) ACC_PUBLIC Code:   stack=2, locals=1, args_size=1    //可知操作数栈长度为2，本地变量表长度为1，参数列表长度为1      0: aload_0                     //从本地变量表中加载索引为0变量的值，也即this的引用，压入栈      1: invokespecial #1            //出栈，使用invokespecial指令调用构造函数(java/lang/Object."&lt;init&gt;":()V),并初始化对象      4: aload_0                     //同上，调用this.name="aaload",并将this的引用压入栈      5: ldc           #2            //将字符串"aaload"常量压入栈      7: putfield      #3            //出栈前面压入的两个值(this引用，字符串"aaload")，并将字符串"aaload"赋值给this.name     10: return   LineNumberTable:     line 5: 0     line 7: 4   LocalVariableTable:     Start  Length  Slot  Name   Signature         0      11     0  this   Lio/github/iamazy/asm/instructions/aaload/Aaload;</code></pre><p>其中：<code>LineNumberTable</code>表示代码行号与指令的对应关系，前面一个数字表示代码行号，后面一个数字表示前面code对应的指令代号。<code>LocalVariableTable</code>表示本地变量表，这里只存了一个<code>this</code>的引用，类型描述为<code>Lio/github/iamazy/asm/instructions/aaload/Aaload</code>，<code>start+length</code>表示这个变量在字节码中的生命周期起始和结束的偏移量(this声明周期为开始0到结束11)，slot表示这个变量在局部变量表中的槽位(槽位可以复用)。</p></li><li><p><code>main</code>函数对应的字节码信息</p><pre><code>public static void main(java.lang.String[]); descriptor: ([Ljava/lang/String;)V flags: (0x0009) ACC_PUBLIC, ACC_STATIC Code:   stack=3, locals=3, args_size=1      0: iconst_1            //将int类型的常量1压入操作数栈      1: anewarray     #4    //从栈顶弹出数组长度(指定数组长度为1)，并实例化数组，并将其压栈      4: astore_1            //将栈顶的引用型数值弹出栈，并保存到局部变量表中的1的位置      5: aload_1             //从局部变量表中装载索引值为1(slot=1)的引用型数值，并压栈      6: iconst_0            //将int类型的常量0压栈      7: ldc           #5    //将字符串"hello asm"常量压栈      9: aastore             //将栈顶的数值依次弹出，并引用型数值存入指定数组的指定索引位置     10: aload_1             //同上，从局部变量表中装载索引值为1(slot=1)的引用型数值，并压栈     11: iconst_0            //将int类型的常量0压栈     12: aaload              //将引用型数组指定索引的值(0)推送至栈顶     13: astore_2            //将栈顶的引用型数值(object[0])弹出栈，并保存到局部变量表中slot=2的位置     14: getstatic     #6    //访问类的静态变量，类型为(java/lang/System.out:Ljava/io/PrintStream;)     17: aload_2             //从局部变量表中装载slot=2的引用型数值，并压栈     18: invokevirtual #7    //将栈顶的引用型数值弹出栈，并调用类成员方法，方法描述符为java/io/PrintStream.println:(Ljava/lang/Object;)V     21: return   LineNumberTable:     line 10: 0     line 11: 5     line 12: 10     line 13: 14     line 14: 21   LocalVariableTable:     Start  Length  Slot  Name   Signature         0      22     0  args   [Ljava/lang/String;         5      17     1 objects   [Ljava/lang/Object;        14       8     2 object   Ljava/lang/Object;</code></pre></li></ol><pre><code>aaloadaastoreaconst_nullaloadaload_&lt;n&gt;anewarrayareturnarraylengthastoreastore_&lt;n&gt;athrowbaloadbastorebipushcaloadcastorecheckcastd2fd2id2ldadddaloaddastoredcmp&lt;op&gt;dconst_&lt;d&gt;ddivdloaddload_&lt;n&gt;dmuldnegdremdreturndstoredstore_&lt;n&gt;dsubdupdup_x1dup_x2dup2dup2_x1dup2_x2f2df2if2lfaddfaloadfastorefcmp&lt;op&gt;fconst_&lt;f&gt;fdivfloadfload_&lt;n&gt;fmulfnegfremfreturnfstorefstore_&lt;n&gt;fsubgetfieldgetstaticgotogoto_wi2bi2ci2di2fi2li2siaddialoadiandiastoreiconst_&lt;i&gt;idivif_acmp&lt;cond&gt;if_icmp&lt;cond&gt;if&lt;cond&gt;ifnonnullifnulliinciloadiload_&lt;n&gt;imulineginstanceofinvokedynamicinvokeinterfaceinvokespecialinvokestaticinvokevirtualioriremireturnishlishristoreistore_&lt;n&gt;isubiushrixorjsrjsr_wl2dl2fl2iladdlaloadlandlastorelcmplconst_&lt;l&gt;ldcldc_wldc2_wldivlloadlload_&lt;n&gt;lmullneglookupswitchlorlremlreturnlshllshrlstorelstore_&lt;n&gt;lsublushrlxormonitorentermonitorexitmultianewarraynewnewarraynoppoppop2putfieldputstaticretreturnsaloadsastoresipushswaptableswitchwide</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> jvm-tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> jdk </tag>
            
            <tag> jvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jvm-运行时方法区</title>
      <link href="2020/03/22/jvm-structure/"/>
      <url>2020/03/22/jvm-structure/</url>
      
        <content type="html"><![CDATA[<h1 id="运行时数据区-Run-Time-Data-Areas"><a href="#运行时数据区-Run-Time-Data-Areas" class="headerlink" title="运行时数据区 (Run-Time Data Areas)"></a>运行时数据区 (Run-Time Data Areas)</h1><blockquote><p>Java虚拟机在程序执行期间定义了各种<code>运行时数据区</code>，一部分数据区的生命周期与Java虚拟机一致，另一部分数据区的生命周期与线程一致。</p></blockquote><h3 id="1-程序计数器-program-counter-register"><a href="#1-程序计数器-program-counter-register" class="headerlink" title="1. 程序计数器 (program counter register)"></a>1. 程序计数器 (program counter register)</h3><ol><li>程序计数器是<code>线程私有的</code>，生命周期随线程而生而灭。</li><li>在任何时候，每个线程都在执行一个方法。如果该方法是<code>native</code>方法，程序计数器会存储当前jvm指令的内存地址。反之，程序计数器的值将不会被定义。</li><li>程序计数器(空间)足够大，可以保存一个<code>returnAddress</code>类型的值或者特定平台上的本地指针。</li></ol><h3 id="2-Java虚拟机栈-java-virtual-machine-stacks"><a href="#2-Java虚拟机栈-java-virtual-machine-stacks" class="headerlink" title="2. Java虚拟机栈 (java virtual machine stacks)"></a>2. Java虚拟机栈 (java virtual machine stacks)</h3><ol><li>Java虚拟机栈是<code>线程私有</code>的，生命周期随线程而生而灭。</li><li>Java虚拟机栈的使用的内存可以是不连续的。</li><li>Java虚拟机栈存储<code>栈帧</code>。每个方法从调用到执行完成的过程，对应着一个<code>栈帧</code>在Java虚拟机栈中的<code>压栈</code>到<code>弹栈</code>的过程。</li><li>Java虚拟机栈可以具有固定大小，也可以根据计算要求动态扩展或收缩。</li><li>如果Java虚拟机允许动态扩展，但是扩展时却无法申请到足够的内存，则会抛出<code>OutOfMemoryError</code>异常。</li><li>如果线程请求分配的栈容量大于Java虚拟机栈允许的最大容量，则会抛出<code>StackOverflowError</code>异常。</li></ol><h3 id="3-堆-heap"><a href="#3-堆-heap" class="headerlink" title="3. 堆 (heap)"></a>3. 堆 (heap)</h3><ol><li>堆存储对象实例。</li><li>堆内存可以是不连续的。</li><li>堆是<code>线程共享</code>的，生命周期与Java虚拟机一致。</li><li>堆可以是固定大小，也可以根据需求动态扩展和收缩。</li><li>只要Java虚拟机中的对象不断被创建，且保证<code>GC Roots</code>到对象之间有<code>可达路径</code>来避免垃圾回收机制，当堆存储的对象到达堆内存允许的最大容量时，会抛出<code>OutOfMemoryError</code>异常。</li></ol><h3 id="4-方法区-method-area"><a href="#4-方法区-method-area" class="headerlink" title="4. 方法区 (method area)"></a>4. 方法区 (method area)</h3><ol><li>方法区是<code>线程共享的</code>，生命周期与Java虚拟机一致</li><li>方法区存储类信息，运行时常量池(<code>runtime constant pool</code>)，字，方法数据，<code>JIT编译后的代码数据</code>，以及类和接口初始化的函数<code>&lt;clinit&gt;</code>和类实例初始化的函数<code>&lt;init&gt;</code>等信息。</li><li>方法区在逻辑上是<code>堆</code>的一部分，但是两者应该区分来看。</li><li>方法区的内存区域可以是不连续的。</li><li>方法区的大小可以是固定的，也可以根据需求动态的扩缩容。</li><li>如果无法提供方法区中的内存来满足分配的请求，会抛出<code>OutOfMemoryError</code>异常。</li></ol><h3 id="5-运行时常量池-runtime-constant-pool"><a href="#5-运行时常量池-runtime-constant-pool" class="headerlink" title="5. 运行时常量池 (runtime constant pool)"></a>5. 运行时常量池 (runtime constant pool)</h3><ol><li>每个运行时常量池都是从Java虚拟机的<code>方法区</code>中分配的</li><li>运行时常量池主要用于存放编译期生成的各种字面量和符号引用，以及在运行时解析的方法和字段引用。</li><li>创建类或接口时，如果运行时常量池构造所需的内存超过Java虚拟机的方法区域中可用的内存，则Java虚拟机将抛出<code>OutOfMemoryError</code></li></ol><h3 id="6-本地方法栈-native-method-stacks"><a href="#6-本地方法栈-native-method-stacks" class="headerlink" title="6. 本地方法栈 (native method stacks)"></a>6. 本地方法栈 (native method stacks)</h3><ol><li>本地方法栈和<code>Java虚拟机栈</code>很相似。</li><li>本地方法栈也是<code>线程私有</code>的，并且也能抛出<code>OutOfMemoryError</code>,<code>StackOverflowError</code>异常。</li><li>本地方法栈为虚拟机使所使用到的<code>native</code>方法服务。</li><li>Java虚拟机中并没有限制实现<code>native</code>方法的语言，使用方式和数据结构，因此具体的虚拟机可以自由的实现它。</li><li>有的虚拟机(Sun HotSpot虚拟机)直接把本地方法栈和虚拟机栈合并在一起</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> jvm-tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> jdk </tag>
            
            <tag> jvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>awesome-java</title>
      <link href="2020/03/21/awesome-java/"/>
      <url>2020/03/21/awesome-java/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th align="center">repository</th><th align="center">watch</th><th align="center">star</th><th align="center">fork</th><th align="center">read</th></tr></thead><tbody><tr><td align="center"><a href="https://github.com/alibaba/transmittable-thread-local" target="_blank" rel="noopener">transmittable-thread-local</a></td><td align="center"><img src="https://img.shields.io/github/watchers/alibaba/transmittable-thread-local.svg" alt=""></td><td align="center"><img src="https://img.shields.io/github/stars/alibaba/transmittable-thread-local.svg" alt=""></td><td align="center"><img src="https://img.shields.io/github/forks/alibaba/transmittable-thread-local.svg" alt=""></td><td align="center"><input type="checkbox" checked=""></td></tr><tr><td align="center"><a href="https://github.com/openjdk/jdk" target="_blank" rel="noopener">jdk</a></td><td align="center"><img src="https://img.shields.io/github/watchers/openjdk/jdk.svg" alt=""></td><td align="center"><img src="https://img.shields.io/github/stars/openjdk/jdk.svg" alt=""></td><td align="center"><img src="https://img.shields.io/github/forks/openjdk/jdk.svg" alt=""></td><td align="center"><input type="checkbox" checked=""></td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> awesome </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> awesome </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>awesome-ml</title>
      <link href="2020/03/21/awesome-ml/"/>
      <url>2020/03/21/awesome-ml/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th align="center">repository</th><th align="center">watch</th><th align="center">star</th><th align="center">fork</th><th align="center">read</th></tr></thead><tbody><tr><td align="center"><a href="https://github.com/czy36mengfei/tensorflow2_tutorials_chinese" target="_blank" rel="noopener">tensorflow2_tutorials_chinese</a></td><td align="center"><img src="https://img.shields.io/github/watchers/czy36mengfei/tensorflow2_tutorials_chinese.svg" alt=""></td><td align="center"><img src="https://img.shields.io/github/stars/czy36mengfei/tensorflow2_tutorials_chinese.svg" alt=""></td><td align="center"><img src="https://img.shields.io/github/forks/czy36mengfei/tensorflow2_tutorials_chinese.svg" alt=""></td><td align="center"><input type="checkbox" checked=""></td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> awesome </category>
          
      </categories>
      
      
        <tags>
            
            <tag> awesome </tag>
            
            <tag> machine learning </tag>
            
            <tag> deep learning </tag>
            
            <tag> ml </tag>
            
            <tag> dl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>awesome-rust</title>
      <link href="2020/03/21/awesome-rust/"/>
      <url>2020/03/21/awesome-rust/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th align="center">repository</th><th align="center">watch</th><th align="center">star</th><th align="center">fork</th><th align="center">read</th></tr></thead><tbody><tr><td align="center"><a href="https://github.com/jonathandturner/rhai" target="_blank" rel="noopener">rhai</a></td><td align="center"><img src="https://img.shields.io/github/watchers/jonathandturner/rhai.svg" alt=""></td><td align="center"><img src="https://img.shields.io/github/stars/jonathandturner/rhai.svg" alt=""></td><td align="center"><img src="https://img.shields.io/github/forks/jonathandturner/rhai.svg" alt=""></td><td align="center"><input type="checkbox"></td></tr><tr><td align="center"><a href="https://github.com/alacritty/alacritty" target="_blank" rel="noopener">alacritty</a></td><td align="center"><img src="https://img.shields.io/github/watchers/alacritty/alacritty.svg" alt=""></td><td align="center"><img src="https://img.shields.io/github/stars/alacritty/alacritty.svg" alt=""></td><td align="center"><img src="https://img.shields.io/github/forks/alacritty/alacritty.svg" alt=""></td><td align="center"><input type="checkbox"></td></tr><tr><td align="center"><a href="https://github.com/Rigellute/spotify-tui" target="_blank" rel="noopener">spotify-tui</a></td><td align="center"><img src="https://img.shields.io/github/watchers/Rigellute/spotify-tui.svg" alt=""></td><td align="center"><img src="https://img.shields.io/github/stars/Rigellute/spotify-tui.svg" alt=""></td><td align="center"><img src="https://img.shields.io/github/forks/Rigellute/spotify-tui.svg" alt=""></td><td align="center"><input type="checkbox"></td></tr><tr><td align="center"><a href="https://github.com/cjbassi/ytop" target="_blank" rel="noopener">ytop</a></td><td align="center"><img src="https://img.shields.io/github/watchers/cjbassi/ytop.svg" alt=""></td><td align="center"><img src="https://img.shields.io/github/stars/cjbassi/ytop.svg" alt=""></td><td align="center"><img src="https://img.shields.io/github/forks/cjbassi/ytop.svg" alt=""></td><td align="center"><input type="checkbox"></td></tr><tr><td align="center"><a href="https://github.com/BurntSushi/xsv" target="_blank" rel="noopener">xsv</a></td><td align="center"><img src="https://img.shields.io/github/watchers/BurntSushi/xsv.svg" alt=""></td><td align="center"><img src="https://img.shields.io/github/stars/BurntSushi/xsv.svg" alt=""></td><td align="center"><img src="https://img.shields.io/github/forks/BurntSushi/xsv.svg" alt=""></td><td align="center"><input type="checkbox"></td></tr><tr><td align="center"><a href="https://github.com/IGI-111/Smith" target="_blank" rel="noopener">Smith</a></td><td align="center"><img src="https://img.shields.io/github/watchers/IGI-111/Smith.svg" alt=""></td><td align="center"><img src="https://img.shields.io/github/stars/IGI-111/Smith.svg" alt=""></td><td align="center"><img src="https://img.shields.io/github/forks/IGI-111/Smith.svg" alt=""></td><td align="center"><input type="checkbox"></td></tr><tr><td align="center"><a href="https://github.com/PistonDevelopers/dyon" target="_blank" rel="noopener">dyon</a></td><td align="center"><img src="https://img.shields.io/github/watchers/PistonDevelopers/dyon.svg" alt=""></td><td align="center"><img src="https://img.shields.io/github/stars/PistonDevelopers/dyon.svg" alt=""></td><td align="center"><img src="https://img.shields.io/github/forks/PistonDevelopers/dyon.svg" alt=""></td><td align="center"><input type="checkbox"></td></tr><tr><td align="center"><a href="https://github.com/bwasty/learn-opengl-rs" target="_blank" rel="noopener">learn-opengl-rs</a></td><td align="center"><img src="https://img.shields.io/github/watchers/bwasty/learn-opengl-rs.svg" alt=""></td><td align="center"><img src="https://img.shields.io/github/stars/bwasty/learn-opengl-rs.svg" alt=""></td><td align="center"><img src="https://img.shields.io/github/forks/bwasty/learn-opengl-rs.svg" alt=""></td><td align="center"><input type="checkbox"></td></tr><tr><td align="center"><a href="https://github.com/betta-cyber/netease-music-tui" target="_blank" rel="noopener">netease-music-tui</a></td><td align="center"><img src="https://img.shields.io/github/watchers/betta-cyber/netease-music-tui.svg" alt=""></td><td align="center"><img src="https://img.shields.io/github/stars/betta-cyber/netease-music-tui.svg" alt=""></td><td align="center"><img src="https://img.shields.io/github/forks/betta-cyber/netease-music-tui.svg" alt=""></td><td align="center"><input type="checkbox"></td></tr><tr><td align="center"><a href="https://github.com/zkat/cacache-rs" target="_blank" rel="noopener">cacache-rs</a></td><td align="center"><img src="https://img.shields.io/github/watchers/zkat/cacache-rs.svg" alt=""></td><td align="center"><img src="https://img.shields.io/github/stars/zkat/cacache-rs.svg" alt=""></td><td align="center"><img src="https://img.shields.io/github/forks/zkat/cacache-rs.svg" alt=""></td><td align="center"><input type="checkbox"></td></tr><tr><td align="center"><a href="https://github.com/jaemk/cached" target="_blank" rel="noopener">cached</a></td><td align="center"><img src="https://img.shields.io/github/watchers/jaemk/cached.svg" alt=""></td><td align="center"><img src="https://img.shields.io/github/stars/jaemk/cached.svg" alt=""></td><td align="center"><img src="https://img.shields.io/github/forks/jaemk/cached.svg" alt=""></td><td align="center"><input type="checkbox"></td></tr><tr><td align="center"><a href="https://github.com/epilys/bb" target="_blank" rel="noopener">bb</a></td><td align="center"><img src="https://img.shields.io/github/watchers/epilys/bb.svg" alt=""></td><td align="center"><img src="https://img.shields.io/github/stars/epilys/bb.svg" alt=""></td><td align="center"><img src="https://img.shields.io/github/forks/epilys/bb.svg" alt=""></td><td align="center"><input type="checkbox"></td></tr><tr><td align="center"><a href="https://github.com/Nercury/rust-and-opengl-lessons" target="_blank" rel="noopener">rust-and-opengl-lessons</a></td><td align="center"><img src="https://img.shields.io/github/watchers/Nercury/rust-and-opengl-lessons.svg" alt=""></td><td align="center"><img src="https://img.shields.io/github/stars/Nercury/rust-and-opengl-lessons.svg" alt=""></td><td align="center"><img src="https://img.shields.io/github/forks/Nercury/rust-and-opengl-lessons.svg" alt=""></td><td align="center"><input type="checkbox"></td></tr><tr><td align="center"><a href="https://github.com/jonhoo/bus" target="_blank" rel="noopener">bus</a></td><td align="center"><img src="https://img.shields.io/github/watchers/jonhoo/bus.svg" alt=""></td><td align="center"><img src="https://img.shields.io/github/stars/jonhoo/bus.svg" alt=""></td><td align="center"><img src="https://img.shields.io/github/forks/jonhoo/bus.svg" alt=""></td><td align="center"><input type="checkbox"></td></tr><tr><td align="center"><a href="https://github.com/tokio-rs/tokio-minihttp" target="_blank" rel="noopener">tokio-rs/tokio-minihttp</a></td><td align="center"><img src="https://img.shields.io/github/watchers/tokio-rs/tokio-minihttp.svg" alt=""></td><td align="center"><img src="https://img.shields.io/github/stars/tokio-rs/tokio-minihttp.svg" alt=""></td><td align="center"><img src="https://img.shields.io/github/forks/tokio-rs/tokio-minihttp.svg" alt=""></td><td align="center"><input type="checkbox"></td></tr><tr><td align="center"><a href="https://github.com/swindon-rs/tk-http" target="_blank" rel="noopener">swindon-rs/tk-http</a></td><td align="center"><img src="https://img.shields.io/github/watchers/swindon-rs/tk-http.svg" alt=""></td><td align="center"><img src="https://img.shields.io/github/stars/swindon-rs/tk-http.svg" alt=""></td><td align="center"><img src="https://img.shields.io/github/forks/swindon-rs/tk-http.svg" alt=""></td><td align="center"><input type="checkbox"></td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> awesome </category>
          
      </categories>
      
      
        <tags>
            
            <tag> awesome </tag>
            
            <tag> rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>awesome-c/c++</title>
      <link href="2020/03/21/awesome-c/"/>
      <url>2020/03/21/awesome-c/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th align="center">repository</th><th align="center">watch</th><th align="center">star</th><th align="center">fork</th><th align="center">read</th></tr></thead><tbody><tr><td align="center"><a href="https://github.com/kozross/awesome-c" target="_blank" rel="noopener">awesome-c</a></td><td align="center"><img src="https://img.shields.io/github/watchers/kozross/awesome-c.svg" alt=""></td><td align="center"><img src="https://img.shields.io/github/stars/kozross/awesome-c.svg" alt=""></td><td align="center"><img src="https://img.shields.io/github/forks/kozross/awesome-c.svg" alt=""></td><td align="center"><input type="checkbox" checked=""></td></tr><tr><td align="center"><a href="https://github.com/changkun/modern-cpp-tutorial" target="_blank" rel="noopener">modern-cpp-tutorial</a></td><td align="center"><img src="https://img.shields.io/github/watchers/changkun/modern-cpp-tutorial.svg" alt=""></td><td align="center"><img src="https://img.shields.io/github/stars/changkun/modern-cpp-tutorial.svg" alt=""></td><td align="center"><img src="https://img.shields.io/github/forks/changkun/modern-cpp-tutorial.svg" alt=""></td><td align="center"><input type="checkbox"></td></tr><tr><td align="center"><a href="https://github.com/changkun/modern-cpp-tutorial" target="_blank" rel="noopener">awesome-modern-cpp</a></td><td align="center"><img src="https://img.shields.io/github/watchers/rigtorp/awesome-modern-cpp.svg" alt=""></td><td align="center"><img src="https://img.shields.io/github/stars/rigtorp/awesome-modern-cpp.svg" alt=""></td><td align="center"><img src="https://img.shields.io/github/forks/rigtorp/awesome-modern-cpp.svg" alt=""></td><td align="center"><input type="checkbox"></td></tr><tr><td align="center"><a href="https://github.com/fffaraz/awesome-cpp" target="_blank" rel="noopener">awesome-cpp</a></td><td align="center"><img src="https://img.shields.io/github/watchers/fffaraz/awesome-cpp.svg" alt=""></td><td align="center"><img src="https://img.shields.io/github/stars/fffaraz/awesome-cpp.svg" alt=""></td><td align="center"><img src="https://img.shields.io/github/forks/fffaraz/awesome-cpp.svg" alt=""></td><td align="center"><input type="checkbox"></td></tr><tr><td align="center"><a href="https://github.com/jbhuang0604/awesome-computer-vision" target="_blank" rel="noopener">awesome-computer-vision</a></td><td align="center"><img src="https://img.shields.io/github/watchers/jbhuang0604/awesome-computer-vision.svg" alt=""></td><td align="center"><img src="https://img.shields.io/github/stars/jbhuang0604/awesome-computer-vision.svg" alt=""></td><td align="center"><img src="https://img.shields.io/github/forks/jbhuang0604/awesome-computer-vision.svg" alt=""></td><td align="center"><input type="checkbox"></td></tr><tr><td align="center"><a href="https://github.com/jbhuang0604/awesome-computer-vision" target="_blank" rel="noopener">project-based-tutorials-in-c</a></td><td align="center"><img src="https://img.shields.io/github/watchers/rby90/project-based-tutorials-in-c.svg" alt=""></td><td align="center"><img src="https://img.shields.io/github/stars/rby90/project-based-tutorials-in-c.svg" alt=""></td><td align="center"><img src="https://img.shields.io/github/forks/rby90/project-based-tutorials-in-c.svg" alt=""></td><td align="center"><input type="checkbox"></td></tr><tr><td align="center"><a href="https://github.com/brenns10/lsh" target="_blank" rel="noopener">lsh</a></td><td align="center"><img src="https://img.shields.io/github/watchers/brenns10/lsh.svg" alt=""></td><td align="center"><img src="https://img.shields.io/github/stars/brenns10/lsh.svg" alt=""></td><td align="center"><img src="https://img.shields.io/github/forks/brenns10/lsh.svg" alt=""></td><td align="center"><input type="checkbox"></td></tr><tr><td align="center"><a href="https://github.com/jamesroutley/write-a-hash-table" target="_blank" rel="noopener">write-a-hash-table</a></td><td align="center"><img src="https://img.shields.io/github/watchers/jamesroutley/write-a-hash-table.svg" alt=""></td><td align="center"><img src="https://img.shields.io/github/stars/jamesroutley/write-a-hash-table.svg" alt=""></td><td align="center"><img src="https://img.shields.io/github/forks/jamesroutley/write-a-hash-table.svg" alt=""></td><td align="center"><input type="checkbox"></td></tr><tr><td align="center"><a href="https://github.com/forhappy/Cplusplus-Concurrency-In-Practice" target="_blank" rel="noopener">Cplusplus-Concurrency-In-Practice</a></td><td align="center"><img src="https://img.shields.io/github/watchers/forhappy/Cplusplus-Concurrency-In-Practice.svg" alt=""></td><td align="center"><img src="https://img.shields.io/github/stars/forhappy/Cplusplus-Concurrency-In-Practice.svg" alt=""></td><td align="center"><img src="https://img.shields.io/github/forks/forhappy/Cplusplus-Concurrency-In-Practice.svg" alt=""></td><td align="center"><input type="checkbox"></td></tr><tr><td align="center"><a href="https://github.com/redis/hiredis" target="_blank" rel="noopener">hiredis</a></td><td align="center"><img src="https://img.shields.io/github/watchers/redis/hiredis.svg" alt=""></td><td align="center"><img src="https://img.shields.io/github/stars/redis/hiredis.svg" alt=""></td><td align="center"><img src="https://img.shields.io/github/forks/redis/hiredis.svg" alt=""></td><td align="center"><input type="checkbox"></td></tr><tr><td align="center"><a href="https://github.com/wzpan/cmake-demo" target="_blank" rel="noopener">cmake-demo</a></td><td align="center"><img src="https://img.shields.io/github/watchers/wzpan/cmake-demo.svg" alt=""></td><td align="center"><img src="https://img.shields.io/github/stars/wzpan/cmake-demo.svg" alt=""></td><td align="center"><img src="https://img.shields.io/github/forks/wzpan/cmake-demo.svg" alt=""></td><td align="center"><input type="checkbox"></td></tr><tr><td align="center"><a href="https://github.com/Akagi201/learning-cmake" target="_blank" rel="noopener">learning-cmake</a></td><td align="center"><img src="https://img.shields.io/github/watchers/Akagi201/learning-cmake.svg" alt=""></td><td align="center"><img src="https://img.shields.io/github/stars/Akagi201/learning-cmake.svg" alt=""></td><td align="center"><img src="https://img.shields.io/github/forks/Akagi201/learning-cmake.svg" alt=""></td><td align="center"><input type="checkbox"></td></tr><tr><td align="center"><a href="https://github.com/antirez/kilo" target="_blank" rel="noopener">kilo</a></td><td align="center"><img src="https://img.shields.io/github/watchers/antirez/kilo.svg" alt=""></td><td align="center"><img src="https://img.shields.io/github/stars/antirez/kilo.svg" alt=""></td><td align="center"><img src="https://img.shields.io/github/forks/antirez/kilo.svg" alt=""></td><td align="center"><input type="checkbox"></td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> awesome </category>
          
      </categories>
      
      
        <tags>
            
            <tag> awesome </tag>
            
            <tag> c/c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SPI机制简单示例</title>
      <link href="2020/03/18/spi/"/>
      <url>2020/03/18/spi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>spi(Service Provider Interface)是一种服务发现机制，主要对接口进行解耦，实现对装配类的动态加载。本文只讲如何使用<code>spi</code>，不去分析它的源码。</p></blockquote><h3 id="1-在classpath下创建META-INF-services文件夹"><a href="#1-在classpath下创建META-INF-services文件夹" class="headerlink" title="1. 在classpath下创建META-INF/services文件夹"></a>1. 在classpath下创建<code>META-INF/services</code>文件夹</h3><p><code>ServiceLoader</code>将会扫描<code>META-INF/services</code>下的文件</p><h3 id="2-创建以父类或接口的完全限定名为名的文件"><a href="#2-创建以父类或接口的完全限定名为名的文件" class="headerlink" title="2. 创建以父类或接口的完全限定名为名的文件"></a>2. 创建以父类或接口的完全限定名为名的文件</h3><p>比如创建一个接口名为<code>Animal</code>，它的完全限定名为<code>io.github.iamazy.asm.spi.Animal</code>，则在<code>META-INF/services</code>文件夹下创建文件<code>io.github.iamazy.asm.spi.Animal</code>。</p><p>Animal接口内容如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> io<span class="token punctuation">.</span>github<span class="token punctuation">.</span>iamazy<span class="token punctuation">.</span>asm<span class="token punctuation">.</span>spi<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    String <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-在io-github-iamazy-asm-spi-Animal文件中添加子类的完全限定名"><a href="#3-在io-github-iamazy-asm-spi-Animal文件中添加子类的完全限定名" class="headerlink" title="3. 在io.github.iamazy.asm.spi.Animal文件中添加子类的完全限定名"></a>3. 在<code>io.github.iamazy.asm.spi.Animal</code>文件中添加子类的完全限定名</h3><p>创建<code>Animal</code>的子类<code>Dog</code>和<code>Cat</code>，类文件内容如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Dog.java</span><span class="token keyword">package</span> io<span class="token punctuation">.</span>github<span class="token punctuation">.</span>iamazy<span class="token punctuation">.</span>asm<span class="token punctuation">.</span>spi<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">implements</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"DOG"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Cat.java</span><span class="token keyword">package</span> io<span class="token punctuation">.</span>github<span class="token punctuation">.</span>iamazy<span class="token punctuation">.</span>asm<span class="token punctuation">.</span>spi<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">implements</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"CAT"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>则<code>io.github.iamazy.asm.spi.Animal</code>文件内容应为：</p><pre><code>io.github.iamazy.asm.spi.Dogio.github.iamazy.asm.spi.Cat</code></pre><h3 id="4-使用ServiceLoader加载"><a href="#4-使用ServiceLoader加载" class="headerlink" title="4. 使用ServiceLoader加载"></a>4. 使用<code>ServiceLoader</code>加载</h3><p>在main方法中使用<code>ServiceLoader</code>加载<code>Animal</code>接口</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    ServiceLoader<span class="token operator">&lt;</span>Animal<span class="token operator">></span> animals <span class="token operator">=</span> ServiceLoader<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>Animal<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>Animal animal<span class="token operator">:</span>animals<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>animal<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> spi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>class文件格式</title>
      <link href="2020/03/17/jdk-class-file/"/>
      <url>2020/03/17/jdk-class-file/</url>
      
        <content type="html"><![CDATA[<blockquote><p>学习Java的同学对class文件可能不会陌生，它是<code>.java</code>文件编译后生成的字节码文件(扩展名为<code>.class</code>)，它是Java语言<code>一次编译，处处运行</code>的基础，也是其他<code>jvm</code>语言运行在jvm上的基础。</p></blockquote><h3 id="1-class文件结构"><a href="#1-class文件结构" class="headerlink" title="1. class文件结构"></a>1. class文件结构</h3><p>一个class由以下各种属性构成</p><pre><code>ClassFile {    u4             magic;    u2             minor_version;    u2             major_version;    u2             constant_pool_count;    cp_info        constant_pool[constant_pool_count-1];    u2             access_flags;    u2             this_class;    u2             super_class;    u2             interfaces_count;    u2             interfaces[interfaces_count];    u2             fields_count;    field_info     fields[fields_count];    u2             methods_count;    method_info    methods[methods_count];    u2             attributes_count;    attribute_info attributes[attributes_count];}</code></pre><h4 id="1-magic"><a href="#1-magic" class="headerlink" title="1. magic"></a>1. magic</h4><p>魔数，用来标识一个class文件的格式，它的值是<code>0xCAFEBABE</code>(咖啡宝贝)，单位是无符号的4个字节(<code>u4</code>)。(通常识别一个文件格式比较严谨的方式是鉴别它的魔数而不是文件的扩展名)。jvm加载class文件时会首先检查这四个字节，如果不是<code>0xCAFEBABE</code>则会拒绝加载该文件避免浪费资源。</p><h4 id="2-minor-version，major-version"><a href="#2-minor-version，major-version" class="headerlink" title="2. minor_version，major_version"></a>2. minor_version，major_version</h4><p>这个字段名是不是很熟悉，假如你的开发环境的jdk版本和部署环境的jdk版本不是一个主版本(如开发环境是jdk1.8，部署环境是jdk13)，很有可能会遇到<code>Unsupported major.minor version 57</code>，第一次遇到这个异常很多人都会很奇怪这个57是怎么来的。</p><table><thead><tr><th>Java SE</th><th>对应的主版本号</th><th>兼容的主版本号</th></tr></thead><tbody><tr><td>1.0.2</td><td>45</td><td>45</td></tr><tr><td>1.1</td><td>45</td><td>45</td></tr><tr><td>1.2</td><td>46</td><td>45 .. 46</td></tr><tr><td>1.3</td><td>47</td><td>45 .. 47</td></tr><tr><td>1.4</td><td>48</td><td>45 .. 48</td></tr><tr><td>5.0</td><td>49</td><td>45 .. 49</td></tr><tr><td>6</td><td>50</td><td>45 .. 50</td></tr><tr><td>7</td><td>51</td><td>45 .. 51</td></tr><tr><td>8</td><td>52</td><td>45 .. 52</td></tr><tr><td>9</td><td>53</td><td>45 .. 53</td></tr><tr><td>10</td><td>54</td><td>45 .. 54</td></tr><tr><td>11</td><td>55</td><td>45 .. 55</td></tr><tr><td>12</td><td>56</td><td>45 .. 56</td></tr><tr><td>13</td><td>57</td><td>45 .. 57</td></tr></tbody></table><p>主版本号(major version)和次版本号(minor version)共同决定class文件格式的版本。如果一个class文件的主版本号是M，次版本号是m，则将该class文件格式的版本定义为<code>M.m</code></p><blockquote><p>对于主版本号(major version)大于56的class文件，次版本号(minor version)必须是0或65535<br>对于主版本号(major version)在[45,55]范围内的，次版本号(minor version)可以是任意值</p></blockquote><h4 id="3-constant-pool-count"><a href="#3-constant-pool-count" class="headerlink" title="3. constant_pool_count"></a>3. constant_pool_count</h4><p>顾名思义，表示常量池的大小，等于常量池<code>constant_pool</code>的大小加1</p><h4 id="4-constant-pool-constant-pool-count-1"><a href="#4-constant-pool-constant-pool-count-1" class="headerlink" title="4. constant_pool[constant_pool_count-1]"></a>4. constant_pool[constant_pool_count-1]</h4><p>紧跟在<code>constant_pool_count</code>后面的结构就是<code>constant_pool</code>，表示常量池，里面存储<code>constant_pool_count</code>个常量(主要包括字面常量，类和接口名，字段名，以及其他类型的常量)，常量池的索引值的范围是[1,constant_pool_count-1]。<br>每个常量池的项(entry)使用<code>cp_info</code>类型表示，<code>cp_info</code>的结构为：</p><pre><code>cp_info {    u1 tag;    u1 info[];}</code></pre><p>jvm根据<code>tag</code>的值来确定每个常量池的项表示什么类型的字面量，info[]表示的是该字面量的字节数组。<br>jvm规定了不同的<code>tag</code>对应不同类型的字面量，对应关系如下表所示：</p><table><thead><tr><th>tag</th><th>表示的字面量</th><th>对应的结构</th></tr></thead><tbody><tr><td>1</td><td>表示字符串常量的值</td><td>CONSTANT_Utf8_info</td></tr><tr><td>3</td><td>表示4字节(int)数值常量</td><td>CONSTANT_Integer_info</td></tr><tr><td>4</td><td>表示4字节(float)数值常量</td><td>CONSTANT_Float_info</td></tr><tr><td>5</td><td>表示8字节(long)数值常量</td><td>CONSTANT_Long_info</td></tr><tr><td>6</td><td>表示8字节(double)数值常量</td><td>CONSTANT_Double_info</td></tr><tr><td>7</td><td>表示类或接口的完全限定名</td><td>CONSTANT_Class_info</td></tr><tr><td>8</td><td>表示java.lang.String类型的常量</td><td>CONSTANT_String_info</td></tr><tr><td>9</td><td>表示类的字段</td><td>CONSTANT_Fieldref_info</td></tr><tr><td>10</td><td>表示类中的方法</td><td>CONSTANT_Methodref_info</td></tr><tr><td>11</td><td>表示类所实现接口的方法</td><td>CONSTANT_InterfaceMethodref_info</td></tr><tr><td>12</td><td>表示字段或方法的名称和类型</td><td>CONSTANT_NameAndType_info</td></tr><tr><td>15</td><td>表示方法句柄</td><td>CONSTANT_MethodHandle_info</td></tr><tr><td>16</td><td>表示方法类型</td><td>CONSTANT_MethodType_info</td></tr><tr><td>18</td><td>表示invokedynamic指令所使用的引导方法及其调用名称，参数，请求返回类型以及可以选择性附加的静态参数的常量序列(参考<code>lambda</code>表达式)</td><td>CONSTANT_InvokeDynamic_info</td></tr></tbody></table><h4 id="5-access-flags"><a href="#5-access-flags" class="headerlink" title="5. access_flags"></a>5. access_flags</h4><p>类访问标识修饰符</p><table><thead><tr><th>flag</th><th>值</th><th>含义</th></tr></thead><tbody><tr><td>ACC_PUBLIC</td><td>0x0001</td><td>允许被不在同一package的类访问</td></tr><tr><td>ACC_FINAL</td><td>0x0010</td><td>不允许有子类</td></tr><tr><td>ACC_SUPER</td><td>0x0020</td><td>当被<code>invokespecial</code>指令调用时，需要特别处理超类方法</td></tr><tr><td>ACC_INTERFACE</td><td>0x0200</td><td>表示是一个接口</td></tr><tr><td>ACC_ABSTRACT</td><td>0x0400</td><td>表示是抽象的类或方法，不允许被初始化</td></tr><tr><td>ACC_SYNTHETIC</td><td>0x1000</td><td>不会在源码中显示</td></tr><tr><td>ACC_ANNOTATION</td><td>0x2000</td><td>表示是一个注解类型</td></tr><tr><td>ACC_ENUM</td><td>0x4000</td><td>表示是一个枚举类型</td></tr><tr><td>ACC_MODULE</td><td>0x8000</td><td>表示是一个模块</td></tr></tbody></table><p>可以自己试着分析以下哪些标识可以一起被设置，哪些则不能(如<code>ACC_FINAL</code>和<code>ACC_ABSTRACT</code>不能同时被设置)</p><h4 id="5-this-class"><a href="#5-this-class" class="headerlink" title="5. this_class"></a>5. this_class</h4><p>表示当前类的全局限定名在常量池(<code>constant_pool</code>)中的索引，该索引对应的常量池项必须是<code>CONSTANT_Class_info</code>的结构，代表这个class文件定义的是一个类还是一个接口。</p><h4 id="6-super-class"><a href="#6-super-class" class="headerlink" title="6. super_class"></a>6. super_class</h4><p>对于一个类，它的<code>super_class</code>的值必须是0或者是常量池中的一个有效索引，如果<code>super_class</code>不为0，则其对应的常量池中的项必须是<code>CONSTANT_Class_info</code>的结构，代表在class文件中，是该类的直接超类。该直接超类和其他超类都不允许被<code>access_flags</code>为<code>ACC_FINAL</code>的修饰符修饰。</p><h4 id="7-interfaces-count"><a href="#7-interfaces-count" class="headerlink" title="7. interfaces_count"></a>7. interfaces_count</h4><p>表示该类(或接口)直接实现(或继承)的接口数</p><h4 id="8-interfaces"><a href="#8-interfaces" class="headerlink" title="8. interfaces[]"></a>8. interfaces[]</h4><p>表示的该类(或接口)是直接实现(或继承)的接口集合在常量池中的索引数组，数组的长度在[0,interfaces_count)之间。且常量池中对应的索引必须都是<code>CONSTANT_Class_info</code>的结构。</p><h4 id="9-fields-count"><a href="#9-fields-count" class="headerlink" title="9. fields_count"></a>9. fields_count</h4><p>表示该类中定义的字段(包括静态变量和实例变量)的数量</p><h4 id="10-fields"><a href="#10-fields" class="headerlink" title="10. fields[]"></a>10. fields[]</h4><p>表示字段数组，每一项的类型必须是<code>field_info</code>，以提供该类或接口中字段的完整描述。这个字段数组只包含该类或接口自己定义的字段，不包含从超类或超接口中继承的字段。</p><h4 id="11-methods-count"><a href="#11-methods-count" class="headerlink" title="11. methods_count"></a>11. methods_count</h4><p>表示该类或接口中定义的方法数量</p><h4 id="12-methods"><a href="#12-methods" class="headerlink" title="12. methods[]"></a>12. methods[]</h4><p>表示方法数组，每一项的类型必须是<code>method_info</code>，以提供该类或接口中字段的完成描述。方法数组包含这个类或接口声明的所有方法，但是不包含从超类或超接口中继承的方法。如果某些项中未设置<code>access_flags</code>为<code>ACC_NATIVE</code>或<code>ACC_ABSTRACT</code>的修饰符，还需要提供实现该方法的jvm指令。</p><h4 id="13-attributes-count"><a href="#13-attributes-count" class="headerlink" title="13. attributes_count"></a>13. attributes_count</h4><p>表示该类或接口中定义的属性的数量</p><h4 id="14-attributes"><a href="#14-attributes" class="headerlink" title="14. attributes[]"></a>14. attributes[]</h4><p>表示该class文件中定义的属性列表，其中的每一项必须是<code>attribute_info</code>类型。</p><h3 id="2-完全限定名"><a href="#2-完全限定名" class="headerlink" title="2. 完全限定名"></a>2. 完全限定名</h3><p>类或接口在class文件中始终以完全限定名表示，这类名称使用<code>CONSTANT_Utf8_info</code>结构进行表示。<br>类和接口是从将这类名称作为他们描述符(descriptor)的一部分的<code>CONSTANT_NameAndType_info</code>和<code>CONSTANT_Class_info</code>的结构中引用的。<br>由于历史原因，出现在class文件中的完全限定名和我们在程序中使用的完全限定名不一样，在class内部结构中，通常会将英文符号的<code>.</code>使用正斜杠<code>/</code>代替。</p><blockquote><p>如<code>Thread</code>类的完全限定名是<code>java.lang.Thread</code>，在class文件格式的描述符中，<code>Thread</code>使用<code>CONSTANT_Utf8_info</code>结构的字符串<code>java/lang/Thread</code>来实现对类名的引用。</p></blockquote><hr><h3 id="3-非限定名称"><a href="#3-非限定名称" class="headerlink" title="3. 非限定名称"></a>3. 非限定名称</h3><p>方法，字段，局部变量和形参的名称都以非限定名称存储，非限定名称至少要包含一个Unicode<code>代码点</code>且不允许包含<code>. ; [ /</code>的字符。<br>方法名称还受到进一步的限制：除了特殊方法名称<code>&lt;init&gt;</code>和<code>&lt;clinit&gt;</code>，方法名称不得包含<code>&lt; &gt;</code>的字符。<br>请注意，字段名称或接口方法名称可以是<code>&lt;init&gt;</code>或<code>&lt;clinit&gt;</code>，但是任何方法调用指令都不能引用<code>&lt;clinit&gt;</code>，而只有<code>invokespecial</code>指令可以引用<code>&lt;init&gt;</code>。</p><h3 id="4-描述符"><a href="#4-描述符" class="headerlink" title="4. 描述符"></a>4. 描述符</h3><blockquote><p>描述符表示一个字段或方法类型的字符串。</p></blockquote><h4 id="1-字段描述符"><a href="#1-字段描述符" class="headerlink" title="1. 字段描述符"></a>1. 字段描述符</h4><table><thead><tr><th>class文件中的字段类型</th><th>字段类型</th><th>解释</th><th>示例</th></tr></thead><tbody><tr><td>V</td><td>void</td><td>void类型</td><td>V -&gt; void</td></tr><tr><td>B</td><td>byte</td><td>有符号的byte类型</td><td>B -&gt; byte</td></tr><tr><td>C</td><td>char</td><td>字符类型</td><td>C -&gt; char</td></tr><tr><td>D</td><td>double</td><td>双精度浮点类型</td><td>D -&gt; double</td></tr><tr><td>F</td><td>float</td><td>单精度浮点类型</td><td>F -&gt; float</td></tr><tr><td>I</td><td>int</td><td>整型</td><td>I -&gt; int</td></tr><tr><td>J</td><td>long</td><td>长整型</td><td>J -&gt; long</td></tr><tr><td>L</td><td>className;</td><td>引用</td><td>一个类实例的引用</td></tr><tr><td>S</td><td>short</td><td>有符号的短整型</td><td>S -&gt; short</td></tr><tr><td>Z</td><td>boolean</td><td>布尔类型</td><td>Z -&gt; boolean</td></tr><tr><td>[</td><td>一维数组</td><td>一维数组的引用</td><td>[[[D -&gt; double[][][]</td></tr></tbody></table><h4 id="2-方法描述符"><a href="#2-方法描述符" class="headerlink" title="2. 方法描述符"></a>2. 方法描述符</h4><blockquote><p>方法描述符的表达式: <code>(参数描述符) 返回值描述符</code></p></blockquote><p>示例：</p><blockquote><p>void m(int i,double d) { … } -&gt; (ID)V<br>Object m(int i,double d,Thread t) { … } -&gt; (IDLjava/lang/Thread;)Ljava/lang/Object;</p></blockquote><!-- `this`关键字对对象的引用除了预期的参数外，并未反应在方法描述符中，实际上，对`this`的引用由调用实例方法的jvm指令隐式传递。 --><h3 id="5-实战"><a href="#5-实战" class="headerlink" title="5. 实战"></a>5. 实战</h3><p>下面将通过一个简单的例子来体会上述文档的含义。</p><h4 id="1-创建项目，并引入依赖"><a href="#1-创建项目，并引入依赖" class="headerlink" title="1. 创建项目，并引入依赖"></a>1. 创建项目，并引入依赖</h4><p>使用ide创建一个java项目，并引入maven依赖(其实jdk里已经包含asm库了)</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.ow2.asm<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>asm<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>7.3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-编写java文件"><a href="#2-编写java文件" class="headerlink" title="2. 编写java文件"></a>2. 编写java文件</h4><p>创建一个java文件，可以命名为<code>ClassWriterTest.java</code>，并输入如下代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>objectweb<span class="token punctuation">.</span>asm<span class="token punctuation">.</span>ClassWriter<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> org<span class="token punctuation">.</span>objectweb<span class="token punctuation">.</span>asm<span class="token punctuation">.</span>Opcodes<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClassWriterTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        ClassWriter classWriter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassWriter</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        classWriter<span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span>V1_8<span class="token punctuation">,</span>ACC_PUBLIC<span class="token operator">+</span>ACC_ABSTRACT<span class="token operator">+</span>ACC_INTERFACE<span class="token punctuation">,</span>                <span class="token string">"pkg/Comparable"</span><span class="token punctuation">,</span>null<span class="token punctuation">,</span><span class="token string">"java/lang/Object"</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"java/io/Serializable"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        classWriter<span class="token punctuation">.</span><span class="token function">visitField</span><span class="token punctuation">(</span>ACC_PUBLIC<span class="token operator">+</span>ACC_FINAL<span class="token operator">+</span>ACC_STATIC<span class="token punctuation">,</span><span class="token string">"LESS"</span><span class="token punctuation">,</span>                <span class="token string">"I"</span><span class="token punctuation">,</span>null<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">visitEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        classWriter<span class="token punctuation">.</span><span class="token function">visitField</span><span class="token punctuation">(</span>ACC_PUBLIC<span class="token operator">+</span>ACC_FINAL<span class="token operator">+</span>ACC_STATIC<span class="token punctuation">,</span><span class="token string">"EQUAL"</span><span class="token punctuation">,</span>                <span class="token string">"Z"</span><span class="token punctuation">,</span>null<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">visitEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        classWriter<span class="token punctuation">.</span><span class="token function">visitField</span><span class="token punctuation">(</span>ACC_PUBLIC<span class="token operator">+</span>ACC_FINAL<span class="token operator">+</span>ACC_STATIC<span class="token punctuation">,</span><span class="token string">"GREATER"</span><span class="token punctuation">,</span>                <span class="token string">"J"</span><span class="token punctuation">,</span>null<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">visitEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        classWriter<span class="token punctuation">.</span><span class="token function">visitMethod</span><span class="token punctuation">(</span>ACC_PUBLIC<span class="token operator">+</span>ACC_ABSTRACT<span class="token punctuation">,</span><span class="token string">"compareTo"</span><span class="token punctuation">,</span>                <span class="token string">"(Ljava/lang/Object;)I"</span><span class="token punctuation">,</span>null<span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">visitEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        classWriter<span class="token punctuation">.</span><span class="token function">visitEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> classWriter<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FileOutputStream fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"./Comparable.class"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>        fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行代码的结果会生成一个<code>Comparable.class</code>文</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Comparable.class</span><span class="token keyword">package</span> pkg<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Comparable</span> <span class="token keyword">extends</span> <span class="token class-name">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> LESS <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> EQUAL <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> GREATER <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span>java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Object o<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结合代码和生成的class文件，你对上面的文档有更深的了解了吗？</p><p>参考: <a href="https://docs.oracle.com/javase/specs/jvms/se13/html/jvms-4.htm" target="_blank" rel="noopener">Java Virtual Machine Specification-ch4</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> jdk-tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> jdk </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HashCode</title>
      <link href="2020/03/15/source-hash-hashcode/"/>
      <url>2020/03/15/source-hash-hashcode/</url>
      
        <content type="html"><![CDATA[<h1 id="HashCode"><a href="#HashCode" class="headerlink" title="HashCode"></a>HashCode</h1><h3 id="1-hashCode声明"><a href="#1-hashCode声明" class="headerlink" title="1. hashCode声明"></a>1. hashCode声明</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     * Returns a hash code value for the object. This method is     * supported for the benefit of hash tables such as those provided by     * {@link java.util.HashMap}.     * &lt;p>     * The general contract of {@code hashCode} is:     * &lt;ul>     * &lt;li>Whenever it is invoked on the same object more than once during     *     an execution of a Java application, the {@code hashCode} method     *     must consistently return the same integer, provided no information     *     used in {@code equals} comparisons on the object is modified.     *     This integer need not remain consistent from one execution of an     *     application to another execution of the same application.     * &lt;li>If two objects are equal according to the {@code equals(Object)}     *     method, then calling the {@code hashCode} method on each of     *     the two objects must produce the same integer result.     * &lt;li>It is &lt;em>not&lt;/em> required that if two objects are unequal     *     according to the {@link java.lang.Object#equals(java.lang.Object)}     *     method, then calling the {@code hashCode} method on each of the     *     two objects must produce distinct integer results.  However, the     *     programmer should be aware that producing distinct integer results     *     for unequal objects may improve the performance of hash tables.     * &lt;/ul>     *     * @implSpec     * As far as is reasonably practical, the {@code hashCode} method defined     * by class {@code Object} returns distinct integers for distinct objects.     *     * @return  a hash code value for this object.     * @see     java.lang.Object#equals(java.lang.Object)     * @see     java.lang.System#identityHashCode     */</span>    <span class="token annotation punctuation">@HotSpotIntrinsicCandidate</span>    <span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>根据注释我们可以知道几点：(已知存在x，y两个对象)</p></blockquote><pre><code>1. Object类的hashCode函数是本地方法2. 如果x.equals(y)==true，则x，y的hashCode一定相等3. 如果x.equals(y)==false,则x，y的hashCode有可能相等4. 如果x.equals(y)==false,且x,y的hashCode不相等会提高hash表查找性能5. 如果子类重写equals方法，建议同时重写hashCode方法，反之亦然</code></pre><h3 id="2-常见生成hashCode的方式"><a href="#2-常见生成hashCode的方式" class="headerlink" title="2. 常见生成hashCode的方式"></a>2. 常见生成hashCode的方式</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token number">1</span><span class="token punctuation">.</span> Objects<span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> values<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">2</span><span class="token punctuation">.</span> System<span class="token punctuation">.</span><span class="token function">identityHashCode</span><span class="token punctuation">(</span>Object x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">3</span><span class="token punctuation">.</span> HashCodeBuilder<span class="token punctuation">.</span><span class="token function">reflectionHashCode</span><span class="token punctuation">(</span>Object x<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>示例：生成字符串”Aa”,”BB”的hashCode</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token string">"Aa"</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                  <span class="token comment" spellcheck="true">// hashCode -> 2112</span><span class="token string">"BB"</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                  <span class="token comment" spellcheck="true">// hashCode -> 2112</span>Objects<span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span><span class="token string">"Aa"</span><span class="token punctuation">)</span>                               <span class="token comment" spellcheck="true">// hash -> 2143</span>Objects<span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span><span class="token string">"BB"</span><span class="token punctuation">)</span>                               <span class="token comment" spellcheck="true">// hash -> 2143</span>System<span class="token punctuation">.</span><span class="token function">identityHashCode</span><span class="token punctuation">(</span><span class="token string">"Aa"</span><span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true">// hashCode -> 1528902577</span>System<span class="token punctuation">.</span><span class="token function">identityHashCode</span><span class="token punctuation">(</span><span class="token string">"BB"</span><span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true">// hashCode -> 1927950199</span>HashCodeBuilder<span class="token punctuation">.</span><span class="token function">reflectionHashCode</span><span class="token punctuation">(</span><span class="token string">"Aa"</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">// hashCode -> 1305660456</span>HashCodeBuilder<span class="token punctuation">.</span><span class="token function">reflectionHashCode</span><span class="token punctuation">(</span><span class="token string">"BB"</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">// hashCode -> 1305964374</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-String类的hashCode实现"><a href="#3-String类的hashCode实现" class="headerlink" title="3. String类的hashCode实现"></a>3. String类的hashCode实现</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     * Returns a hash code for this string. The hash code for a     * {@code String} object is computed as     * &lt;blockquote>&lt;pre>     * s[0]*31^(n-1) + s[1]*31^(n-2) + ... + s[n-1]     * &lt;/pre>&lt;/blockquote>     * using {@code int} arithmetic, where {@code s[i]} is the     * &lt;i>i&lt;/i>th character of the string, {@code n} is the length of     * the string, and {@code ^} indicates exponentiation.     * (The hash value of the empty string is zero.)     *     * @return  a hash code value for this object.     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// The hash or hashIsZero fields are subject to a benign data race,</span>        <span class="token comment" spellcheck="true">// making it crucial to ensure that any observable result of the</span>        <span class="token comment" spellcheck="true">// calculation in this method stays correct under any possible read of</span>        <span class="token comment" spellcheck="true">// these fields. Necessary restrictions to allow this to be correct</span>        <span class="token comment" spellcheck="true">// without explicit memory fences or similar concurrency primitives is</span>        <span class="token comment" spellcheck="true">// that we can ever only write to one of these two fields for a given</span>        <span class="token comment" spellcheck="true">// String instance, and that the computation is idempotent and derived</span>        <span class="token comment" spellcheck="true">// from immutable state</span>        <span class="token keyword">int</span> h <span class="token operator">=</span> hash<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>h <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>hashIsZero<span class="token punctuation">)</span> <span class="token punctuation">{</span>            h <span class="token operator">=</span> <span class="token function">isLatin1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> StringLatin1<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>                           <span class="token operator">:</span> StringUTF16<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>h <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                hashIsZero <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                hash <span class="token operator">=</span> h<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> h<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>根据注释可知</p></blockquote><pre><code>1. String的hashCode计算公式：s[0]*31^(n-1) + s[1]*31^(n-2) + ... + s[n-1]</code></pre><blockquote><p>StringLatin1.hashCode(byte[] value)实现</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> h <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">byte</span> v <span class="token operator">:</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        h <span class="token operator">=</span> <span class="token number">31</span> <span class="token operator">*</span> h <span class="token operator">+</span> <span class="token punctuation">(</span>v <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> h<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>选择数字31是因为它是一个奇质数，如果选择一个偶数会在乘法运算中产生溢出，导致数值信息丢失，因为乘二相当于移位运算。选择质数的优势并不是特别的明显，但这是一个传统。同时，数字31有一个很好的特性，即乘法运算可以被移位和减法运算取代，来获取更好的性能：<code>31 * i == (i &lt;&lt; 5) - i</code>，现代的 Java 虚拟机可以自动的完成这个优化。<br>31是质子数中一个“不大不小”的存在，如果你使用的是一个如2的较小质数，那么得出的乘积会在一个很小的范围，很容易造成哈希值的冲突。而如果选择一个100以上的质数，得出的哈希值会超出int的最大范围，这两种都不合适。如果你对超过50000个英文单词（由两个不同版本的Unix字典合并而成进行hashcode运算，并使用常数<code>31</code>,<code>33</code>,<code>37</code>,<code>39</code>和<code>41</code>作为乘子，每个常数算出的哈希值冲突数都小于7个，所以在上面几个常数中，常数<code>31</code>被 Java实现所选用也就不足为奇了</p></blockquote><h3 id="4-0xff问题"><a href="#4-0xff问题" class="headerlink" title="4. 0xff问题"></a>4. 0xff问题</h3><blockquote><p>计算机中存储的数据都是以补码的形式存储的</p><blockquote><p>原码</p><blockquote><p>正数：（十进制）正数转换成二进制就是该正数的原码<br> 负数：（十进制）负数的绝对值转换成二进制然后在高位补1就是该负数的原码</p></blockquote></blockquote></blockquote><blockquote><blockquote><p>反码</p><blockquote><p>正数：（十进制）正数的反码与原码相同<br>负数：（十进制）负数的反码等于原码除符号位以外所有的位取反</p></blockquote></blockquote></blockquote><blockquote><blockquote><p>补码</p><blockquote><p>正数：（十进制）正数的补码与原码相同<br>负数：（十进制）负数的补码等于负数的原码最低位加1</p></blockquote></blockquote></blockquote><table><thead><tr><th>num</th><th>原码</th><th>反码</th><th>补码</th></tr></thead><tbody><tr><td>128</td><td>1000 0000</td><td>1000 0000</td><td>1000 0000</td></tr><tr><td>-127</td><td>1111 1111</td><td>1000 0000</td><td>1000 0001</td></tr></tbody></table><h4 id="a-为什么要v-amp-0xff？"><a href="#a-为什么要v-amp-0xff？" class="headerlink" title="a. 为什么要v&amp;0xff？"></a>a. 为什么要v&amp;0xff？<br></h4><blockquote><p>&amp;表示按位与，只有两个数同时为1，才能得到1<br>0xff表示的二进制数是<code>1111 1111</code>,占一个字节，和其进行&amp;操作的数，最低8位，不会发生变化</p></blockquote><h5 id="1-示例"><a href="#1-示例" class="headerlink" title="1. 示例"></a>1. 示例</h5><p>当byte类型的数字（如-127）转换为int类型的时候，其补码将提升到32位，补码的高位补1</p><blockquote><p>(byte)-127 -&gt; (int)-127 时</p></blockquote><pre><code>1000 0001转1111 1111 1111 1111 1111 1111 1000 0001</code></pre><blockquote><p>负数的补码转原码，符号位不变，其他位取反，然后最低位加1</p></blockquote><pre><code>1111 1111 1111 1111 1111 1111 1000 0001 (-127补码高24位补1)转1000 0000 0000 0000 0000 0000 0111 1111 (int类型的32位-127的原码)</code></pre><p>可以看出当byte-&gt;int时可以保证十进制不变</p><p>但是有时候如文件流转为byte数组的时候，我们不关心对应的十进制数有没有变，而是关心对应的补码有没有变，这时候就需要加上&amp;0xff。</p><p>上例中，byte-&gt;int高24位必将补1，此时补码显然发生变化，再&amp;0xff，将高24位重新置0，这样就能保证补码的一致性，由于符号位发生变化，表示的十进制数也会改变。</p><pre><code>1111 1111 1111 1111 1111 1111 1000 0001&amp;0000 0000 0000 0000 0000 0000 1111 1111 结果：0000 0000 0000 0000 0000 0000 1000 0001 -&gt; 正数的补码==原码 -&gt; 129</code></pre><p>和原来的补码一致，但是显然符号位变了，表示的十进制发生变化，变为129</p><h5 id="2-总结"><a href="#2-总结" class="headerlink" title="2.总结"></a>2.总结</h5><blockquote><p>取得低8位<br>保持补码的一致性，但是表示的十进制数可能会变</p></blockquote><h3 id="5-为什么hashCode可能会相同"><a href="#5-为什么hashCode可能会相同" class="headerlink" title="5. 为什么hashCode可能会相同"></a>5. 为什么hashCode可能会相同</h3><blockquote><p>哈希表结合了<strong>直接寻址</strong>和<strong>链式寻址</strong>两种方式，所需要的就是将需要加入哈希表的数据首先计算哈希值，预先分组，然后再将数据挂到分组后的链表中，随着添加的数据越来越多，分组链上会挂接更多的数据，同一个分组链上的数据必定具有相同的哈希值，因为java的hash函数返回值是int类型，也就是说，最多允许存在2^32个分组，也是有限的，所以很容易出现相同的hash值。</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> jdk-tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> jdk </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java扫描jar包和mvn项目子模块</title>
      <link href="2020/03/08/java-sao-miao-jar-bao-he-mvn-xiang-mu-zi-mo-kuai/"/>
      <url>2020/03/08/java-sao-miao-jar-bao-he-mvn-xiang-mu-zi-mo-kuai/</url>
      
        <content type="html"><![CDATA[<blockquote><p>最近刚入职，领导分配了一个小任务：将自研的mq系统的配置全部打印出来。听起来好像挺简单，但是一看代码发现好多配置项不在一个module里，而且有的配置项置只暴露出来api，如果在不修改代码的情况下，是无法获取到所有配置项的。想了一下午，想到使用<code>spi</code>或者<code>asm</code>来解决，<code>spi</code>一样有无法获取<code>private</code>,<code>package-protected</code>或者其他模块的配置项的问题。<code>asm</code>想着应该可以解决，但我是个<code>asm</code>半吊子水货，用的不好。所以想来想去只想到扫描<code>mvn</code>项目来解决这个问题。好在已经有人遇到过这种问题并已经解决了(<a href="https://blog.csdn.net/a729913162/article/details/81698109" target="_blank" rel="noopener">地址</a>)，先说声谢谢啦。</p></blockquote><h3 id="定义Scanner接口"><a href="#定义Scanner接口" class="headerlink" title="定义Scanner接口"></a>定义Scanner接口</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Scanner</span> <span class="token punctuation">{</span>    String CLASS_SUFFIX <span class="token operator">=</span> <span class="token string">".class"</span><span class="token punctuation">;</span>    Set<span class="token operator">&lt;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> <span class="token function">search</span><span class="token punctuation">(</span>String pkgName<span class="token punctuation">,</span> Predicate<span class="token operator">&lt;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> predicate<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">default</span> Set<span class="token operator">&lt;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> <span class="token function">search</span><span class="token punctuation">(</span>String pkgName<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">search</span><span class="token punctuation">(</span>pkgName<span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="定义FileScanner"><a href="#定义FileScanner" class="headerlink" title="定义FileScanner"></a>定义FileScanner</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileScanner</span> <span class="token keyword">implements</span> <span class="token class-name">Scanner</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> String defaultClassPath <span class="token operator">=</span> FileScanner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getDefaultClassPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> defaultClassPath<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDefaultClassPath</span><span class="token punctuation">(</span>String defaultClassPath<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>defaultClassPath <span class="token operator">=</span> defaultClassPath<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">FileScanner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">FileScanner</span><span class="token punctuation">(</span>String defaultClassPath<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>defaultClassPath<span class="token operator">=</span>defaultClassPath<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Set<span class="token operator">&lt;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> <span class="token function">search</span><span class="token punctuation">(</span>String pkgName<span class="token punctuation">,</span> Predicate<span class="token operator">&lt;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> predicate<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String classPath <span class="token operator">=</span> defaultClassPath<span class="token punctuation">;</span>        String basePkgPath <span class="token operator">=</span> pkgName<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">,</span>File<span class="token punctuation">.</span>separator<span class="token punctuation">)</span><span class="token punctuation">;</span>        String searchPath <span class="token operator">=</span> classPath<span class="token operator">+</span>basePkgPath<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ClassSearcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doPath</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>searchPath<span class="token punctuation">)</span><span class="token punctuation">,</span>pkgName<span class="token punctuation">,</span>predicate<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ClassSearcher</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> Set<span class="token operator">&lt;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> classPaths <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> Set<span class="token operator">&lt;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> <span class="token function">doPath</span><span class="token punctuation">(</span>File file<span class="token punctuation">,</span>String pkgName<span class="token punctuation">,</span>Predicate<span class="token operator">&lt;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> predicate<span class="token punctuation">,</span><span class="token keyword">boolean</span> flag<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                File<span class="token punctuation">[</span><span class="token punctuation">]</span> files<span class="token operator">=</span>file<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span>                    pkgName <span class="token operator">=</span> pkgName<span class="token operator">+</span><span class="token string">"."</span><span class="token operator">+</span>file<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>files<span class="token operator">!=</span>null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span>File f <span class="token operator">:</span> files<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token function">doPath</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> pkgName<span class="token punctuation">,</span> predicate<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span>CLASS_SUFFIX<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>pkgName<span class="token operator">+</span><span class="token string">"."</span><span class="token operator">+</span>file<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>file<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>predicate<span class="token operator">==</span>null<span class="token operator">||</span>predicate<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                            classPaths<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> classPaths<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="定义JarScanner"><a href="#定义JarScanner" class="headerlink" title="定义JarScanner"></a>定义JarScanner</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JarScanner</span> <span class="token keyword">implements</span> <span class="token class-name">Scanner</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Set<span class="token operator">&lt;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> <span class="token function">search</span><span class="token punctuation">(</span>String pkgName<span class="token punctuation">,</span> Predicate<span class="token operator">&lt;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> predicate<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Set<span class="token operator">&lt;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> clazzSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Enumeration<span class="token operator">&lt;</span>URL<span class="token operator">></span> urlEnumeration <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContextClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span>pkgName<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">,</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>urlEnumeration<span class="token punctuation">.</span><span class="token function">hasMoreElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                URL url <span class="token operator">=</span> urlEnumeration<span class="token punctuation">.</span><span class="token function">nextElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                String protocol <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">getProtocol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"jar"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>protocol<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    JarURLConnection connection <span class="token operator">=</span> <span class="token punctuation">(</span>JarURLConnection<span class="token punctuation">)</span> url<span class="token punctuation">.</span><span class="token function">openConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>connection<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>                        JarFile jarFile <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">getJarFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>jarFile<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>                            Enumeration<span class="token operator">&lt;</span>JarEntry<span class="token operator">></span> jarEntryEnumeration <span class="token operator">=</span> jarFile<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">while</span> <span class="token punctuation">(</span>jarEntryEnumeration<span class="token punctuation">.</span><span class="token function">hasMoreElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                                JarEntry entry <span class="token operator">=</span> jarEntryEnumeration<span class="token punctuation">.</span><span class="token function">nextElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                String entryName <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token keyword">if</span><span class="token punctuation">(</span>entryName<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>CLASS_SUFFIX<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>entryName<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span>pkgName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                                    String clazzName <span class="token operator">=</span> entryName<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>entryName<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                    Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>clazzName<span class="token punctuation">)</span><span class="token punctuation">;</span>                                    <span class="token keyword">if</span><span class="token punctuation">(</span>predicate<span class="token operator">==</span>null<span class="token operator">||</span>predicate<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                                        clazzSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>                                    <span class="token punctuation">}</span>                                <span class="token punctuation">}</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"file"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>protocol<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    FileScanner fileScanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileScanner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    fileScanner<span class="token punctuation">.</span><span class="token function">setDefaultClassPath</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>pkgName<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">,</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    clazzSet<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>fileScanner<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>pkgName<span class="token punctuation">,</span>predicate<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> <span class="token operator">|</span> IOException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> clazzSet<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="定义两种Scanner的委托"><a href="#定义两种Scanner的委托" class="headerlink" title="定义两种Scanner的委托"></a>定义两种Scanner的委托</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ScannerExecutor</span> <span class="token keyword">implements</span> <span class="token class-name">Scanner</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> ScannerExecutor INSTANCE<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Set<span class="token operator">&lt;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> <span class="token function">search</span><span class="token punctuation">(</span>String pkgName<span class="token punctuation">,</span> Predicate<span class="token operator">&lt;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> predicate<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Scanner fileScanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileScanner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Set<span class="token operator">&lt;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> fileSearch <span class="token operator">=</span> fileScanner<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>pkgName<span class="token punctuation">,</span>predicate<span class="token punctuation">)</span><span class="token punctuation">;</span>        Scanner jarScanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JarScanner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Set<span class="token operator">&lt;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> jarSearch <span class="token operator">=</span> jarScanner<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>pkgName<span class="token punctuation">,</span>predicate<span class="token punctuation">)</span><span class="token punctuation">;</span>        fileSearch<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>jarSearch<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> fileSearch<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token function">ScannerExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> ScannerExecutor <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>INSTANCE<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>ScannerExecutor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>INSTANCE<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>                    INSTANCE<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ScannerExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> INSTANCE<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="定义封装的工具类"><a href="#定义封装的工具类" class="headerlink" title="定义封装的工具类"></a>定义封装的工具类</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClassScanner</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Set<span class="token operator">&lt;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> <span class="token function">search</span><span class="token punctuation">(</span>String pkgName<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">search</span><span class="token punctuation">(</span>pkgName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Set<span class="token operator">&lt;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> <span class="token function">search</span><span class="token punctuation">(</span>String pkgName<span class="token punctuation">,</span> Predicate<span class="token operator">&lt;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> predicate<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> ScannerExecutor<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>pkgName<span class="token punctuation">,</span>predicate<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> maven </tag>
            
            <tag> scanner </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>诫子书</title>
      <link href="2020/02/14/jie-zi-shu/"/>
      <url>2020/02/14/jie-zi-shu/</url>
      
        <content type="html"><![CDATA[<h3 id="诫子书"><a href="#诫子书" class="headerlink" title="诫子书"></a>诫子书</h3><p>夫君子之行，静以修身，俭以养德。非淡泊无以明志，非宁静无以致远。夫学须静也，才须学也，非学无以广才，非志无以成学。淫慢则不能励精，险躁则不能治性。年与时驰，意与日去，遂成枯落，多不接世，悲守穷庐，将复何及！</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 诸葛亮 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诸葛亮 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>后出师表</title>
      <link href="2020/02/14/hou-chu-shi-biao/"/>
      <url>2020/02/14/hou-chu-shi-biao/</url>
      
        <content type="html"><![CDATA[<h3 id="后出师表"><a href="#后出师表" class="headerlink" title="后出师表"></a>后出师表</h3><p>先帝深虑汉、贼不两立，王业不偏安，故托臣以讨贼也。以先帝之明，量臣之才，固知臣伐贼，才弱敌强也。然不伐贼，王业亦亡。惟坐而待亡，孰与伐之？是故托臣而弗疑也。臣受命之日，寝不安席，食不甘味。思惟北征。宜先入南。故五月渡泸，深入不毛，并日而食；臣非不自惜也，顾王业不可得偏安于蜀都，故冒危难，以奉先帝之遗意也，而议者谓为非计。今贼适疲于西，又务于东，兵法乘劳，此进趋之时也。谨陈其事如左：</p><p>高帝明并日月，谋臣渊深，然涉险被创，危然后安。今陛下未及高帝，谋臣不如良、平，而欲以长策取胜，坐定天下，此臣之未解一也。</p><p>刘繇、王朗各据州郡，论安言计，动引圣人，群疑满腹，众难塞胸，今岁不战，明年不征，使孙策坐大，遂并江东，此臣之未解二也。</p><p>曹操智计，殊绝于人，其用兵也，仿佛孙、吴，然困于南阳，险于乌巢，危于祁连，逼于黎阳，几败北山，殆死潼关，然后伪定一时耳。况臣才弱，而欲以不危而定之，此臣之未解三也。曹操五攻昌霸不下，四越巢湖不成，任用李服而李服图之，委任夏侯而夏侯败亡，先帝每称操为能，犹有此失，况臣驽下，何能必胜？此臣之未解四也。</p><p>自臣到汉中，中间期年耳，然丧赵云、阳群、马玉、阎芝、丁立、白寿、刘郃、邓铜等及曲长、屯将七十余人，突将、无前、賨叟、青羌、散骑、武骑一千余人。此皆数十年之内所纠合四方之精锐，非一州之所有；若复数年，则损三分之二也，当何以图敌？此臣之未解五也。</p><p>今民穷兵疲，而事不可息；事不可息，则住与行劳费正等。而不及今图之，欲以一州之地，与贼持久，此臣之未解六也。</p><p>夫难平者，事也。昔先帝败军于楚，当此时，曹操拊手，谓天下以定。然后先帝东连吴越，西取巴蜀，举兵北征，夏侯授首，此操之失计，而汉事将成也。然后吴更违盟，关羽毁败，秭归蹉跌，曹丕称帝。凡事如是，难可逆见。臣鞠躬尽瘁，死而后已。至于成败利钝，非臣之明所能逆睹也。</p><p>注：此表，《亮集》所无，出张俨默记。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 诸葛亮 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诸葛亮 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>出师表</title>
      <link href="2020/02/14/chu-shi-biao/"/>
      <url>2020/02/14/chu-shi-biao/</url>
      
        <content type="html"><![CDATA[<h3 id="出师表"><a href="#出师表" class="headerlink" title="出师表"></a>出师表</h3><p>先帝创业未半而中道崩殂，今天下三分，益州疲弊，此诚危急存亡之秋也。然侍卫之臣不懈于内，忠志之士忘身于外者，盖追先帝之殊遇，欲报之于陛下也。诚宜开张圣听，以光先帝遗德，恢弘志士之气，不宜妄自菲薄，引喻失义，以塞忠谏之路也。</p><p>宫中府中，俱为一体，陟罚臧否，不宜异同。若有作奸犯科及为忠善者，宜付有司论其刑赏，以昭陛下平明之理，不宜偏私，使内外异法也。</p><p>侍中、侍郎郭攸之、费祎、董允等，此皆良实，志虑忠纯，是以先帝简拔以遗陛下。愚以为宫中之事，事无大小，悉以咨之，然后施行，必能裨补阙漏，有所广益。</p><p>将军向宠，性行淑均，晓畅军事，试用于昔日，先帝称之曰能，是以众议举宠为督。愚以为营中之事，悉以咨之，必能使行阵和睦，优劣得所。</p><p>亲贤臣，远小人，此先汉所以兴隆也；亲小人，远贤臣，此后汉所以倾颓也。先帝在时，每与臣论此事，未尝不叹息痛恨于桓、灵也。侍中、尚书、长史、参军，此悉贞良死节之臣，愿陛下亲之信之，则汉室之隆，可计日而待也。</p><p>臣本布衣，躬耕于南阳，苟全性命于乱世，不求闻达于诸侯。先帝不以臣卑鄙，猥自枉屈，三顾臣于草庐之中，咨臣以当世之事，由是感激，遂许先帝以驱驰。后值倾覆，受任于败军之际，奉命于危难之间，尔来二十有一年矣。</p><p>先帝知臣谨慎，故临崩寄臣以大事也。受命以来，夙夜忧叹，恐托付不效，以伤先帝之明，故五月渡泸，深入不毛。今南方已定，兵甲已足，当奖率三军，北定中原，庶竭驽钝，攘除奸凶，兴复汉室，还于旧都。此臣所以报先帝而忠陛下之职分也。至于斟酌损益，进尽忠言，则攸之、祎、允之任也。</p><p>愿陛下托臣以讨贼兴复之效，不效，则治臣之罪，以告先帝之灵。若无兴德之言，则责攸之、祎、允等之慢，以彰其咎；陛下亦宜自谋，以咨诹善道，察纳雅言，深追先帝遗诏，臣不胜受恩感激。</p><p>今当远离，临表涕零，不知所言</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 诸葛亮 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诸葛亮 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Antlr4教程</title>
      <link href="2020/02/12/antlr4-jiao-cheng/"/>
      <url>2020/02/12/antlr4-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<h2 id="Antlr4"><a href="#Antlr4" class="headerlink" title="Antlr4"></a>Antlr4</h2><h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h3><blockquote><p>Antlr (ANother Tool for Language Recognition) 是一个强大的<code>跨语言</code>语法解析器，可以用来读取、处理、执行或翻译结构化文本或二进制文件。它被广泛用来构建语言，工具和框架。Antlr可以从语法上来生成一个可以构建和遍历解析树的解析器。</p></blockquote><h3 id="2-谁在使用"><a href="#2-谁在使用" class="headerlink" title="2. 谁在使用"></a>2. 谁在使用</h3><ol><li>Hive</li><li>Spark</li><li>Oracle</li><li>Presto</li><li>Elasticsearch</li></ol><h3 id="3-常见的语法分析器"><a href="#3-常见的语法分析器" class="headerlink" title="3. 常见的语法分析器"></a>3. 常见的语法分析器</h3><ol><li>Antlr</li><li>Javacc</li><li>SqlParser (位于<code>Alibaba</code>的<code>Druid</code>库中)</li></ol><p>其中<code>Antlr</code>和<code>Javacc</code>都是现代的语法解析器，两者都很优秀，其中<code>Antlr</code>要更胜一筹。而<code>SqlParser</code>只能解析<code>sql</code>语句，功能比较单一。</p><p>🐷：本人基于<code>Antlr</code>和<code>SqlParser</code>分别写了一套<code>elasticsearch-sql</code>组件，有需要的人可以看看源码。</p><p><a href="http://github.com/iamazy/elasticsearch-sql" target="_blank" rel="noopener">基于Antlr4的elasticsearch-sql</a></p><p><a href="https://github.com/iamazy/elasticsearch-sql2" target="_blank" rel="noopener">基于SqlParser的elasticsearch-sql</a></p><h3 id="4-基本概念"><a href="#4-基本概念" class="headerlink" title="4. 基本概念"></a>4. 基本概念</h3><ol><li>抽象语法树 (Abstract Syntax Tree,AST)<br>抽象语法树是源代码结构的一种抽象表示，它以树的形状表示语言的语法结构。抽象语法树一般可以用来进行<code>代码语法的检查</code>，<code>代码风格的检查</code>，<code>代码的格式化</code>，<code>代码的高亮</code>，<code>代码的错误提示</code>以及<code>代码的自动补全</code>等等。</li><li>语法解析器 (Parser)<br>语法解析器通常作为<code>编译器</code>或<code>解释器</code>出现。它的作用是进行语法检查，并构建由输入单词(<code>Token</code>)组成的数据结构(即抽象语法树)。语法解析器通常使用<code>词法分析器(Lexer)</code>从输入字符流中分离出一个个的单词(<code>Token</code>)，并将单词(<code>Token</code>)流作为其输入。实际开发中，语法解析器可以手工编写，也可以使用工具自动生成。</li><li>词法分析器 (Lexer)<br><code>词法分析</code>是指在计算机科学中，将<code>字符序列</code>转换为单词(<code>Token</code>)的过程。执行<code>词法分析</code>的程序便称为词法分析器。<code>词法分析器(Lexer)</code>一般是用来供<code>语法解析器(Parser)</code>调用的。</li></ol><h3 id="5-Antlr4使用方法"><a href="#5-Antlr4使用方法" class="headerlink" title="5. Antlr4使用方法"></a>5. Antlr4使用方法</h3><h4 id="1-安装"><a href="#1-安装" class="headerlink" title="(1). 安装"></a>(1). 安装</h4><pre class="line-numbers language-shell"><code class="language-shell">cd /usr/local/libwget</span> https://www.antlr.org/download/antlr-4.8-complete.jarexport CLASSPATH=".:/usr/local/lib/antlr-4.8-complete.jar:$CLASSPATH"antlr4='java -jar /usr/local/lib/antlr-4.8-complete.jar'grun='java org.antlr.v4.gui.TestRig'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是本文并不使用这种方式来使用<code>Antlr4</code>，而是使用插件的方式。</p><h4 id="2-安装插件"><a href="#2-安装插件" class="headerlink" title="(2). 安装插件"></a>(2). 安装插件</h4><p>本文使用IDEA作为开发工具，在Preference-&gt;Plugins中搜索<code>antlr</code>然后安装即可。</p><h4 id="3-定义DSL语法"><a href="#3-定义DSL语法" class="headerlink" title="(3). 定义DSL语法"></a>(3). 定义DSL语法</h4><p>本文将使用<code>Antlr4</code>实现一个简化版的<code>Elasticsearch</code>的查询语法，代替<code>Elasticsearch</code>的<code>dsl</code>。</p><p><strong>搜索语法定义如下：</strong></p><blockquote><p>单个查询：<code>field</code>:<code>value</code>，其中冒号<code>:</code>和等于号<code>=</code>表示等于，<code>!=</code>表示不等于<br>多个查询：<code>field1</code>:<code>value1</code>,<code>field2</code>:<code>value2</code>，使用逗号<code>,</code>或者<code>&amp;&amp;</code>表示<code>且</code>的关系，使用<code>||</code>表示<code>或</code>的关系<br>括号：可以使用括号<code>()</code>将多个条件扩起来</p></blockquote><p><strong>示例：</strong></p><blockquote><p>country:中国,province:湖南,city:张家界</p></blockquote><p><strong>生成的抽象语法树如下所示:</strong><br><img src="/2020/02/12/antlr4-jiao-cheng/ast1.png" alt="搜索语法的抽象语法树"></p><p><strong>聚类语法定义如下：</strong></p><blockquote><p>桶聚类(terms)：<code>field</code><br>去重值计数(cardinality)：(<code>field</code>)<br>桶聚类分页(composite)：<code>field</code> after <code>value</code><br>地理边框聚类(geoBoundingBox)：[<code>field</code>]<br>桶聚类嵌套子聚类(subAgg)：<code>field1</code>&gt;<code>field2</code>&gt;<code>field3</code><br>多个聚类条件用分号<code>;</code>隔开</p></blockquote><p><strong>示例：</strong></p><blockquote><p>country;(country);country&gt;province&gt;city;province after 湖南</p></blockquote><p><strong>生成的抽象语法树如下所示:</strong><br><img src="/2020/02/12/antlr4-jiao-cheng/ast2.png" alt="聚类语法的抽象语法树"></p><h4 id="4-编写Antlr4语法文件"><a href="#4-编写Antlr4语法文件" class="headerlink" title="(4). 编写Antlr4语法文件"></a>(4). 编写Antlr4语法文件</h4><blockquote><p>创建SearchLexer.g4文件，定义词法分析器的Token</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 表明SearchLexer.g4文件是词法分析器(lexer)定义文件</span><span class="token comment" spellcheck="true">// 词法分析器的名称一定要和文件名保持一致</span>lexer grammar SearchLexer<span class="token punctuation">;</span>channels <span class="token punctuation">{</span>    ESQLCOMMENT<span class="token punctuation">,</span>    ERRORCHANNEL<span class="token punctuation">}</span><span class="token comment" spellcheck="true">//SKIP 当Antlr解析到下面的代码时，会选择跳过</span><span class="token comment" spellcheck="true">// 遇到 \t\r\n 会忽略</span>SPACE<span class="token punctuation">:</span> <span class="token punctuation">[</span> \t\r\n<span class="token punctuation">]</span><span class="token operator">+</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">channel</span><span class="token punctuation">(</span>HIDDEN<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 遇到 </span><span class="token comment" spellcheck="true">/*!  */</span> 会当作注释跳过SPEC_ESSQL_COMMENT<span class="token punctuation">:</span> <span class="token string">'/*!'</span> <span class="token punctuation">.</span><span class="token operator">+</span><span class="token operator">?</span> <span class="token string">'*/'</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">channel</span><span class="token punctuation">(</span>ESQLCOMMENT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 遇到 </span><span class="token comment" spellcheck="true">/* */</span> 会当作注释跳过COMMENT_INPUT<span class="token punctuation">:</span> <span class="token string">'/*'</span> <span class="token punctuation">.</span><span class="token operator">*</span><span class="token operator">?</span> <span class="token string">'*/'</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">channel</span><span class="token punctuation">(</span>HIDDEN<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 遇到 -- 会当作注释跳过</span><span class="token comment" spellcheck="true">// 遇到 # 会当作注释跳过</span>LINE_COMMENT<span class="token punctuation">:</span> <span class="token punctuation">(</span>        <span class="token punctuation">(</span><span class="token string">'-- '</span> <span class="token operator">|</span> <span class="token string">'#'</span><span class="token punctuation">)</span> <span class="token operator">~</span><span class="token punctuation">[</span>\r\n<span class="token punctuation">]</span><span class="token operator">*</span> <span class="token punctuation">(</span><span class="token string">'\r'</span><span class="token operator">?</span> <span class="token string">'\n'</span> <span class="token operator">|</span> EOF<span class="token punctuation">)</span>        <span class="token operator">|</span> <span class="token string">'--'</span> <span class="token punctuation">(</span><span class="token string">'\r'</span><span class="token operator">?</span> <span class="token string">'\n'</span> <span class="token operator">|</span> EOF<span class="token punctuation">)</span>    <span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">channel</span><span class="token punctuation">(</span>HIDDEN<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 定义Token，模式为 {field}:{value}</span>MINUS<span class="token punctuation">:</span> <span class="token string">'-'</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//使MINUS和-等价，以下同理</span>STAR<span class="token punctuation">:</span> <span class="token string">'*'</span><span class="token punctuation">;</span>COLON<span class="token punctuation">:</span> <span class="token string">':'</span><span class="token operator">|</span><span class="token string">'\uFF1A'</span><span class="token punctuation">;</span>EQ<span class="token punctuation">:</span> <span class="token string">'='</span><span class="token punctuation">;</span>NE<span class="token punctuation">:</span> <span class="token string">'!='</span><span class="token punctuation">;</span>BOOLOR<span class="token punctuation">:</span> <span class="token string">'||'</span><span class="token operator">|</span><span class="token string">'|'</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 使BOOLOR与||或者|等价</span>BOOLAND<span class="token punctuation">:</span> <span class="token string">'&amp;&amp;'</span><span class="token operator">|</span>COMMA<span class="token operator">|</span><span class="token string">'&amp;'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//CONSTRUCTORS</span>DOT<span class="token punctuation">:</span> <span class="token string">'.'</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">mode</span><span class="token punctuation">(</span>AFTER_DOT<span class="token punctuation">)</span><span class="token punctuation">;</span>LBRACKET<span class="token punctuation">:</span> <span class="token string">'['</span><span class="token punctuation">;</span>RBRACKET<span class="token punctuation">:</span> <span class="token string">']'</span><span class="token punctuation">;</span>LPAREN<span class="token punctuation">:</span> <span class="token string">'('</span><span class="token punctuation">;</span>RPAREN<span class="token punctuation">:</span> <span class="token string">')'</span><span class="token punctuation">;</span>COMMA<span class="token punctuation">:</span> <span class="token string">','</span><span class="token operator">|</span><span class="token string">'\uFF0C'</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 使COMMA与,或，等价(\uFF0C表示，的unicode编码)</span>SEMI<span class="token punctuation">:</span> <span class="token string">';'</span><span class="token punctuation">;</span>GT<span class="token punctuation">:</span> <span class="token string">'>'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 这里和以下代码等价</span><span class="token comment" spellcheck="true">// AFTER: 'after'  但是这种代码只能表示小写的after，是大小写区分的，这样不好</span><span class="token comment" spellcheck="true">// 通过下面定义的fragment，将AFTER用A F T E R表示，一定要每个字母空一格，就可以不区分大小写了</span><span class="token comment" spellcheck="true">// 所有语法的关键字都建议使用这种方式声明</span>AFTER<span class="token punctuation">:</span> A F T E R<span class="token punctuation">;</span>SINGLE_QUOTE<span class="token punctuation">:</span> <span class="token string">'\''</span><span class="token punctuation">;</span>DOUBLE_QUOTE<span class="token punctuation">:</span> <span class="token string">'"'</span><span class="token punctuation">;</span>REVERSE_QUOTE<span class="token punctuation">:</span> <span class="token string">'`'</span><span class="token punctuation">;</span>UNDERLINE<span class="token punctuation">:</span> <span class="token string">'_'</span><span class="token punctuation">;</span>CHINESE<span class="token punctuation">:</span> <span class="token string">'\u4E00'</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token string">'\u9FA5'</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//表示所有中文的unicode编码，以支持中文</span>ID<span class="token punctuation">:</span> <span class="token punctuation">(</span>CHINESE<span class="token operator">|</span>ID_LETTER<span class="token operator">|</span>DOT<span class="token operator">|</span>MINUS<span class="token operator">|</span>UNDERLINE<span class="token operator">|</span>INT<span class="token operator">|</span>FLOAT<span class="token operator">|</span>REVERSE_QUOTE<span class="token operator">|</span>DOUBLE_QUOTE<span class="token operator">|</span>SINGLE_QUOTE<span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ? 表示可有可无</span><span class="token comment" spellcheck="true">// + 表示至少有一个</span><span class="token comment" spellcheck="true">// | 表示或的关系</span><span class="token comment" spellcheck="true">// * 表示有0或者多个</span>INT<span class="token punctuation">:</span> MINUS<span class="token operator">?</span> DEC_DIGIT<span class="token operator">+</span><span class="token punctuation">;</span>FLOAT<span class="token punctuation">:</span> <span class="token punctuation">(</span>MINUS<span class="token operator">?</span> DEC_DIGIT<span class="token operator">+</span> DOT DEC_DIGIT<span class="token operator">+</span><span class="token punctuation">)</span><span class="token operator">|</span> <span class="token punctuation">(</span>MINUS<span class="token operator">?</span> DOT DEC_DIGIT<span class="token operator">+</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 使用DEC_DIGIT代表0到9之间的数字</span>fragment DEC_DIGIT<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 使用ID_LETTER代表a-z的大写小写字母和_</span>fragment ID_LETTER<span class="token punctuation">:</span> <span class="token punctuation">[</span>a<span class="token operator">-</span>zA<span class="token operator">-</span>Z<span class="token punctuation">]</span><span class="token operator">|</span> UNDERLINE<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 表示用A代表a和A，这样就可以不区分大小写了，以下同理</span>fragment A<span class="token punctuation">:</span> <span class="token punctuation">[</span>aA<span class="token punctuation">]</span><span class="token punctuation">;</span> fragment B<span class="token punctuation">:</span> <span class="token punctuation">[</span>bB<span class="token punctuation">]</span><span class="token punctuation">;</span>fragment C<span class="token punctuation">:</span> <span class="token punctuation">[</span>cC<span class="token punctuation">]</span><span class="token punctuation">;</span>fragment D<span class="token punctuation">:</span> <span class="token punctuation">[</span>dD<span class="token punctuation">]</span><span class="token punctuation">;</span>fragment E<span class="token punctuation">:</span> <span class="token punctuation">[</span>eE<span class="token punctuation">]</span><span class="token punctuation">;</span>fragment F<span class="token punctuation">:</span> <span class="token punctuation">[</span>fF<span class="token punctuation">]</span><span class="token punctuation">;</span>fragment G<span class="token punctuation">:</span> <span class="token punctuation">[</span>gG<span class="token punctuation">]</span><span class="token punctuation">;</span>fragment H<span class="token punctuation">:</span> <span class="token punctuation">[</span>hH<span class="token punctuation">]</span><span class="token punctuation">;</span>fragment I<span class="token punctuation">:</span> <span class="token punctuation">[</span>iI<span class="token punctuation">]</span><span class="token punctuation">;</span>fragment J<span class="token punctuation">:</span> <span class="token punctuation">[</span>jJ<span class="token punctuation">]</span><span class="token punctuation">;</span>fragment K<span class="token punctuation">:</span> <span class="token punctuation">[</span>kK<span class="token punctuation">]</span><span class="token punctuation">;</span>fragment L<span class="token punctuation">:</span> <span class="token punctuation">[</span>lL<span class="token punctuation">]</span><span class="token punctuation">;</span>fragment M<span class="token punctuation">:</span> <span class="token punctuation">[</span>mM<span class="token punctuation">]</span><span class="token punctuation">;</span>fragment N<span class="token punctuation">:</span> <span class="token punctuation">[</span>nN<span class="token punctuation">]</span><span class="token punctuation">;</span>fragment O<span class="token punctuation">:</span> <span class="token punctuation">[</span>oO<span class="token punctuation">]</span><span class="token punctuation">;</span>fragment P<span class="token punctuation">:</span> <span class="token punctuation">[</span>pP<span class="token punctuation">]</span><span class="token punctuation">;</span>fragment Q<span class="token punctuation">:</span> <span class="token punctuation">[</span>qQ<span class="token punctuation">]</span><span class="token punctuation">;</span>fragment R<span class="token punctuation">:</span> <span class="token punctuation">[</span>rR<span class="token punctuation">]</span><span class="token punctuation">;</span>fragment S<span class="token punctuation">:</span> <span class="token punctuation">[</span>sS<span class="token punctuation">]</span><span class="token punctuation">;</span>fragment T<span class="token punctuation">:</span> <span class="token punctuation">[</span>tT<span class="token punctuation">]</span><span class="token punctuation">;</span>fragment U<span class="token punctuation">:</span> <span class="token punctuation">[</span>uU<span class="token punctuation">]</span><span class="token punctuation">;</span>fragment V<span class="token punctuation">:</span> <span class="token punctuation">[</span>vV<span class="token punctuation">]</span><span class="token punctuation">;</span>fragment W<span class="token punctuation">:</span> <span class="token punctuation">[</span>wW<span class="token punctuation">]</span><span class="token punctuation">;</span>fragment X<span class="token punctuation">:</span> <span class="token punctuation">[</span>xX<span class="token punctuation">]</span><span class="token punctuation">;</span>fragment Y<span class="token punctuation">:</span> <span class="token punctuation">[</span>yY<span class="token punctuation">]</span><span class="token punctuation">;</span>fragment Z<span class="token punctuation">:</span> <span class="token punctuation">[</span>zZ<span class="token punctuation">]</span><span class="token punctuation">;</span>mode AFTER_DOT<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//DEFAULT_MODE是Antlr中默认定义好的mode</span>DOTINTEGER<span class="token punctuation">:</span> <span class="token punctuation">(</span> <span class="token string">'0'</span> <span class="token operator">|</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">mode</span><span class="token punctuation">(</span>DEFAULT_MODE<span class="token punctuation">)</span><span class="token punctuation">;</span>DOTID<span class="token punctuation">:</span> <span class="token punctuation">[</span>_a<span class="token operator">-</span>zA<span class="token operator">-</span>Z<span class="token punctuation">]</span> <span class="token punctuation">[</span>_a<span class="token operator">-</span>zA<span class="token operator">-</span>Z0<span class="token number">-9</span><span class="token punctuation">]</span><span class="token operator">*</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">mode</span><span class="token punctuation">(</span>DEFAULT_MODE<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>创建SearchParser.g4文件，定义语法解析器的搜索语法</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 表明SearchParser.g4文件是语法解析器(parser)定义文件</span><span class="token comment" spellcheck="true">// 同理，语法分析器的名称一定要和文件名保持一致</span>parser grammar SearchParser<span class="token punctuation">;</span>options <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 表示解析token的词法解析器使用SearchLexer</span>    tokenVocab <span class="token operator">=</span> SearchLexer<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// EOF(end of file)表示文件结束符，这个是Antlr中已经定义好的</span>prog<span class="token punctuation">:</span> expression <span class="token operator">|</span> STAR EOF<span class="token punctuation">;</span>expression<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">// 表示表达式可以被括号括起来</span>    <span class="token comment" spellcheck="true">// 如果语法后面加上了#{name}，相当于将这个name作为这个语法块的名字，这个#{name}要加都得加上，要不加都不加</span>    <span class="token comment" spellcheck="true">// (country:中国)</span>    LPAREN expression RPAREN                                                            #lrExpr    <span class="token comment" spellcheck="true">// leftExpr是给定义的语法起的别名(alias)，可有可无，但是有会更好点</span>    <span class="token comment" spellcheck="true">// 因为antlr解析同一语法块的同一类token时，会将他们放在一个list里面</span>    <span class="token comment" spellcheck="true">// 比如下面的语法块，有两个expression，antlr会将他们放在一个列表expressions里</span>    <span class="token comment" spellcheck="true">// 获取第一个expression时需要expressions.get(0)，获取第二个expression时需要expressions.get(1)</span>    <span class="token comment" spellcheck="true">// 如果给第一个expression起了个别名叫leftExpr，给第二个expression起了个别名叫rightExpr</span>    <span class="token comment" spellcheck="true">// 那样在java里面调用时就可以直接调用leftExpr和rightExpr，而不需要指定expressions中的索引(0或1)</span>    <span class="token comment" spellcheck="true">// 这样做的好处是：如果之后添加了新的token，比如在下面语法中间添加一个expression的token</span>    <span class="token comment" spellcheck="true">// 这时如果不使用别名leftExpr，rightExpr就可能需要修改java代码，因为原来rightExpr对应的expression在expressions中索引变为2了</span>    <span class="token comment" spellcheck="true">// 使用别名leftExpr，rightExpr(当然还可以取别的名字)就没有这个问题，使语法文件和生成的java代码更便于维护</span>    <span class="token comment" spellcheck="true">// country:中国</span>    <span class="token operator">|</span> leftExpr <span class="token operator">=</span> expression operator <span class="token operator">=</span> <span class="token punctuation">(</span>EQ <span class="token operator">|</span>COLON<span class="token operator">|</span> NE <span class="token punctuation">)</span> rightExpr <span class="token operator">=</span> expression            #eqExpr    <span class="token comment" spellcheck="true">// (country:中国||country:美国)&amp;&amp;city:北京</span>    <span class="token operator">|</span> leftExpr <span class="token operator">=</span> expression operator <span class="token operator">=</span> <span class="token punctuation">(</span>BOOLAND<span class="token operator">|</span>BOOLOR<span class="token punctuation">)</span> rightExpr <span class="token operator">=</span> expression            #boolExpr    <span class="token comment" spellcheck="true">// country等字面量</span>    <span class="token operator">|</span> ID                                                                                #identityExpr<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>创建AggregateParser.g4文件，定义语法解析器的聚类语法</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript">parser grammar AggregateParser<span class="token punctuation">;</span>options <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 聚类的语法分析器也可以使用SearchLexer</span>    tokenVocab <span class="token operator">=</span> SearchLexer<span class="token punctuation">;</span><span class="token punctuation">}</span>expr<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">// 多个聚类条件用分号隔开</span>    aggClause <span class="token punctuation">(</span>SEMI aggClause<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// aggClause表示代表以下聚类的任意一种</span>aggClause<span class="token punctuation">:</span>    cardinalityAggClause<span class="token operator">|</span>termsAggClause<span class="token operator">|</span>termsAfterAggClause<span class="token operator">|</span>geoBoundingBoxAggClause<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 去重值计数 -> (country)</span>cardinalityAggClause<span class="token punctuation">:</span>    LPAREN ID RPAREN<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 桶聚类分页 -> province after 湖南</span>termsAfterAggClause<span class="token punctuation">:</span>    field <span class="token operator">=</span> ID AFTER after<span class="token operator">=</span>ID<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 桶聚类嵌套子聚类 -> country>province>city</span>termsAggClause<span class="token punctuation">:</span>    field <span class="token operator">=</span> ID <span class="token punctuation">(</span>GT termsAggClause<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 地理边框聚类 -> [coordinate]</span>geoBoundingBoxAggClause<span class="token punctuation">:</span>    LBRACKET ID RBRACKET<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-使用Antlr4自动生成代码文件"><a href="#5-使用Antlr4自动生成代码文件" class="headerlink" title="(5). 使用Antlr4自动生成代码文件"></a>(5). 使用Antlr4自动生成代码文件</h4><blockquote><p>在IDEA中，在<code>SearchParser.g4</code>，<code>AggregateParser.g4</code>文件右键选择<code>Configure ANTLR...</code>，配置每个文件生成代码的配置和输出目录</p></blockquote><p><img src="/2020/02/12/antlr4-jiao-cheng/configure-antlr.png" alt="antlr配置项"></p><blockquote><p>然后在<code>SearchParser.g4</code>，<code>AggregateParser.g4</code>文件右键选择<code>Generate ANTLR Recognizer</code>生成代码文件。生成的代码结构如下所示：</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">|</span><span class="token operator">--</span> io    <span class="token operator">|</span><span class="token operator">--</span> github        <span class="token operator">|</span><span class="token operator">--</span> iamazy            <span class="token operator">|</span><span class="token operator">--</span> elasticsearch                <span class="token operator">|</span><span class="token operator">--</span> dsl                    <span class="token operator">|</span><span class="token operator">--</span> antlr4                        <span class="token operator">|</span><span class="token operator">--</span> AggregateParser<span class="token punctuation">.</span>interp                        <span class="token operator">|</span><span class="token operator">--</span> AggregateParser<span class="token punctuation">.</span>java                        <span class="token operator">|</span><span class="token operator">--</span> AggregateParser<span class="token punctuation">.</span>tokens                        <span class="token operator">|</span><span class="token operator">--</span> AggregateParserBaseListener<span class="token punctuation">.</span>java                        <span class="token operator">|</span><span class="token operator">--</span> AggregateParserBaseVisitor<span class="token punctuation">.</span>java                        <span class="token operator">|</span><span class="token operator">--</span> AggregateParserListener<span class="token punctuation">.</span>java                        <span class="token operator">|</span><span class="token operator">--</span> AggregateParserVisitor<span class="token punctuation">.</span>java                        <span class="token operator">|</span><span class="token operator">--</span> AggregateWalker<span class="token punctuation">.</span>java          <span class="token comment" spellcheck="true">//这是自己创建的文件，不是antlr自动生成的</span>                        <span class="token operator">|</span><span class="token operator">--</span> QueryParser<span class="token punctuation">.</span>java              <span class="token comment" spellcheck="true">//这是自己创建的文件，不是antlr自动生成的</span>                        <span class="token operator">|</span><span class="token operator">--</span> SearchLexer<span class="token punctuation">.</span>interp                        <span class="token operator">|</span><span class="token operator">--</span> SearchLexer<span class="token punctuation">.</span>java                        <span class="token operator">|</span><span class="token operator">--</span> SearchLexer<span class="token punctuation">.</span>tokens                        <span class="token operator">|</span><span class="token operator">--</span> SearchParser<span class="token punctuation">.</span>interp                        <span class="token operator">|</span><span class="token operator">--</span> SearchParser<span class="token punctuation">.</span>java                        <span class="token operator">|</span><span class="token operator">--</span> SearchParser<span class="token punctuation">.</span>tokens                        <span class="token operator">|</span><span class="token operator">--</span> SearchParserBaseListener<span class="token punctuation">.</span>java                        <span class="token operator">|</span><span class="token operator">--</span> SearchParserBaseVisitor<span class="token punctuation">.</span>java                        <span class="token operator">|</span><span class="token operator">--</span> SearchParserListener<span class="token punctuation">.</span>java                        <span class="token operator">|</span><span class="token operator">--</span> SearchParserVisitor<span class="token punctuation">.</span>java                        <span class="token operator">|</span><span class="token operator">--</span> SearchWalker<span class="token punctuation">.</span>java             <span class="token comment" spellcheck="true">//这是自己创建的文件，不是antlr自动生成的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-遍历抽象语法树"><a href="#6-遍历抽象语法树" class="headerlink" title="(6). 遍历抽象语法树"></a>(6). 遍历抽象语法树</h4><blockquote><p>这里我们不实现<code>Antlr</code>生成好的<code>Listener</code>或<code>Visitor</code>遍历抽象语法树的接口，而是自己写代码遍历抽象语法树</p></blockquote><p>在<code>io.github.iamazy.elasticsearch.dsl.antlr4</code>包下创建Java类<code>SearchWalker</code>，<code>AggregateWalker</code>，<code>QueryParser</code>。</p><blockquote><p><code>SearchWalker</code>类文件内容如下：</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> io<span class="token punctuation">.</span>github<span class="token punctuation">.</span>iamazy<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>antlr4<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>antlr<span class="token punctuation">.</span>v4<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span>CharStream<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>antlr<span class="token punctuation">.</span>v4<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span>CharStreams<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>antlr<span class="token punctuation">.</span>v4<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span>CommonTokenStream<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>lang3<span class="token punctuation">.</span>StringUtils<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @descrition 生成遍历搜索条件的抽象语法树的遍历器 **/</span><span class="token keyword">class</span> <span class="token class-name">SearchWalker</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> String expression<span class="token punctuation">;</span>    <span class="token function">SearchWalker</span><span class="token punctuation">(</span>String expression<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>expression<span class="token operator">=</span>expression<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    SearchParser <span class="token function">buildAntlrTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>expression<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"搜索表达式不能为空!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        CharStream stream<span class="token operator">=</span> CharStreams<span class="token punctuation">.</span><span class="token function">fromString</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>expression<span class="token punctuation">)</span><span class="token punctuation">;</span>        SearchLexer lexer<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">SearchLexer</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SearchParser</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CommonTokenStream</span><span class="token punctuation">(</span>lexer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>AggregateWalker</code>类文件内容如下：</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> io<span class="token punctuation">.</span>github<span class="token punctuation">.</span>iamazy<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>antlr4<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>antlr<span class="token punctuation">.</span>v4<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span>CharStream<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>antlr<span class="token punctuation">.</span>v4<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span>CharStreams<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>antlr<span class="token punctuation">.</span>v4<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span>CommonTokenStream<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>lang3<span class="token punctuation">.</span>StringUtils<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @descrition 生成遍历聚类条件的抽象语法树的遍历器 **/</span><span class="token keyword">class</span> <span class="token class-name">AggregateWalker</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String expression<span class="token punctuation">;</span>    <span class="token function">AggregateWalker</span><span class="token punctuation">(</span>String expression<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>expression<span class="token operator">=</span>expression<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    AggregateParser <span class="token function">buildAntlrTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>expression<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"搜索表达式不能为空!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        CharStream stream<span class="token operator">=</span> CharStreams<span class="token punctuation">.</span><span class="token function">fromString</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>expression<span class="token punctuation">)</span><span class="token punctuation">;</span>        SearchLexer lexer<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">SearchLexer</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AggregateParser</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CommonTokenStream</span><span class="token punctuation">(</span>lexer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>QueryParser</code>类文件内容如下：</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> io<span class="token punctuation">.</span>github<span class="token punctuation">.</span>iamazy<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>antlr4<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>lang3<span class="token punctuation">.</span>StringUtils<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>index<span class="token punctuation">.</span>query<span class="token punctuation">.</span>BoolQueryBuilder<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>index<span class="token punctuation">.</span>query<span class="token punctuation">.</span>QueryBuilder<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>index<span class="token punctuation">.</span>query<span class="token punctuation">.</span>QueryBuilders<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span>aggregations<span class="token punctuation">.</span>AggregationBuilder<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span>aggregations<span class="token punctuation">.</span>AggregationBuilders<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span>aggregations<span class="token punctuation">.</span>bucket<span class="token punctuation">.</span>composite<span class="token punctuation">.</span>CompositeAggregationBuilder<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span>aggregations<span class="token punctuation">.</span>bucket<span class="token punctuation">.</span>composite<span class="token punctuation">.</span>CompositeValuesSourceBuilder<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>search<span class="token punctuation">.</span>aggregations<span class="token punctuation">.</span>bucket<span class="token punctuation">.</span>composite<span class="token punctuation">.</span>TermsValuesSourceBuilder<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @descrition 遍历搜索条件和聚类条件的抽象语法树 **/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QueryParser</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> QueryBuilder <span class="token function">parse</span><span class="token punctuation">(</span>String expr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//如果表达式为*，则返回全部数据</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>expr<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> QueryBuilders<span class="token punctuation">.</span><span class="token function">matchAllQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//生成遍历树的实例</span>        SearchWalker walker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchWalker</span><span class="token punctuation">(</span>expr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用方法，遍历表达式</span>        SearchParser searchParser <span class="token operator">=</span> walker<span class="token punctuation">.</span><span class="token function">buildAntlrTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将搜索表达式转换为查询elasticsearch的querybuilder</span>        <span class="token keyword">return</span> <span class="token function">parseExpressionContext</span><span class="token punctuation">(</span>searchParser<span class="token punctuation">.</span><span class="token function">prog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">expression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> QueryBuilder <span class="token function">parseExpressionContext</span><span class="token punctuation">(</span>SearchParser<span class="token punctuation">.</span>ExpressionContext expressionContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//如果表达式是被括号包含的话，调用parseLrExprContext</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>expressionContext <span class="token keyword">instanceof</span> <span class="token class-name">SearchParser<span class="token punctuation">.</span>LrExprContext</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">parseLrExprContext</span><span class="token punctuation">(</span><span class="token punctuation">(</span>SearchParser<span class="token punctuation">.</span>LrExprContext<span class="token punctuation">)</span> expressionContext<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">//如果表达式是条件表达式包含与或非的话，调用parseBoolExprContext</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>expressionContext <span class="token keyword">instanceof</span> <span class="token class-name">SearchParser<span class="token punctuation">.</span>BoolExprContext</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">parseBoolExprContext</span><span class="token punctuation">(</span><span class="token punctuation">(</span>SearchParser<span class="token punctuation">.</span>BoolExprContext<span class="token punctuation">)</span> expressionContext<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">//如果表达式是等式的话，调用parseEqExprContext</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>expressionContext <span class="token keyword">instanceof</span> <span class="token class-name">SearchParser<span class="token punctuation">.</span>EqExprContext</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">parseEqExprContext</span><span class="token punctuation">(</span><span class="token punctuation">(</span>SearchParser<span class="token punctuation">.</span>EqExprContext<span class="token punctuation">)</span> expressionContext<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>         <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//不满足上述条件，则抛出异常</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"不支持该查询语法!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//解析括号中的表达式</span>    <span class="token keyword">private</span> QueryBuilder <span class="token function">parseLrExprContext</span><span class="token punctuation">(</span>SearchParser<span class="token punctuation">.</span>LrExprContext lrExprContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SearchParser<span class="token punctuation">.</span>ExpressionContext expression <span class="token operator">=</span> lrExprContext<span class="token punctuation">.</span><span class="token function">expression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">parseExpressionContext</span><span class="token punctuation">(</span>expression<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> BoolQueryBuilder <span class="token function">parseBoolExprContext</span><span class="token punctuation">(</span>SearchParser<span class="token punctuation">.</span>BoolExprContext boolExprContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//解析条件表达式的左半边表达式</span>        SearchParser<span class="token punctuation">.</span>ExpressionContext leftExpr <span class="token operator">=</span> boolExprContext<span class="token punctuation">.</span><span class="token function">expression</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//解析条件表达式的右半边表达式</span>        SearchParser<span class="token punctuation">.</span>ExpressionContext rightExpr <span class="token operator">=</span> boolExprContext<span class="token punctuation">.</span><span class="token function">expression</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将左半边表达式转换成querybuilder</span>        QueryBuilder leftQuery <span class="token operator">=</span> <span class="token function">parseExpressionContext</span><span class="token punctuation">(</span>leftExpr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将右半边表达式转换为querybuilder</span>        QueryBuilder rightQuery <span class="token operator">=</span> <span class="token function">parseExpressionContext</span><span class="token punctuation">(</span>rightExpr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//如果表达式表示的是且的关系</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>boolExprContext<span class="token punctuation">.</span><span class="token function">BOOLAND</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> QueryBuilders<span class="token punctuation">.</span><span class="token function">boolQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">must</span><span class="token punctuation">(</span>leftQuery<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">must</span><span class="token punctuation">(</span>rightQuery<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//如果表达式表示的是或的关系</span>            <span class="token keyword">return</span> QueryBuilders<span class="token punctuation">.</span><span class="token function">boolQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span>leftQuery<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span>rightQuery<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> QueryBuilder <span class="token function">parseEqExprContext</span><span class="token punctuation">(</span>SearchParser<span class="token punctuation">.</span>EqExprContext eqExprContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String field<span class="token punctuation">,</span> value<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//如果左半边的字段值</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>eqExprContext<span class="token punctuation">.</span>leftExpr <span class="token keyword">instanceof</span> <span class="token class-name">SearchParser<span class="token punctuation">.</span>IdentityExprContext</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//获取该字段实际的映射字段</span>            field <span class="token operator">=</span> <span class="token function">parseIdentityContext</span><span class="token punctuation">(</span><span class="token punctuation">(</span>SearchParser<span class="token punctuation">.</span>IdentityExprContext<span class="token punctuation">)</span> eqExprContext<span class="token punctuation">.</span>leftExpr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//否则抛出异常</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"不支持该查询语法!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//如果右半边是个值</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>eqExprContext<span class="token punctuation">.</span>rightExpr <span class="token keyword">instanceof</span> <span class="token class-name">SearchParser<span class="token punctuation">.</span>IdentityExprContext</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//则不动</span>            value <span class="token operator">=</span> <span class="token function">parseIdentityContext</span><span class="token punctuation">(</span><span class="token punctuation">(</span>SearchParser<span class="token punctuation">.</span>IdentityExprContext<span class="token punctuation">)</span> eqExprContext<span class="token punctuation">.</span>rightExpr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//否则抛出异常</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"不支持该查询语法!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//如果条件表达式的关联条件是不等于</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>eqExprContext<span class="token punctuation">.</span><span class="token function">NE</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//则调用must_not</span>            <span class="token keyword">return</span> QueryBuilders<span class="token punctuation">.</span><span class="token function">boolQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mustNot</span><span class="token punctuation">(</span>QueryBuilders<span class="token punctuation">.</span><span class="token function">termQuery</span><span class="token punctuation">(</span>field<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">//如果条件表达式的关联条件是冒号或者等于号</span>        <span class="token keyword">return</span> QueryBuilders<span class="token punctuation">.</span><span class="token function">termQuery</span><span class="token punctuation">(</span>field<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//解析字段名和字段值</span>    <span class="token keyword">private</span> String <span class="token function">parseIdentityContext</span><span class="token punctuation">(</span>SearchParser<span class="token punctuation">.</span>IdentityExprContext identityExprContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> identityExprContext<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//解析聚类表达式</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>AggregationBuilder<span class="token operator">></span> <span class="token function">parseAggregationExpr</span><span class="token punctuation">(</span>String expr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//生成聚类遍历树实例</span>        AggregateWalker walker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AggregateWalker</span><span class="token punctuation">(</span>expr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//遍历聚类表达式</span>        AggregateParser aggregateParser <span class="token operator">=</span> walker<span class="token punctuation">.</span><span class="token function">buildAntlrTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将聚类表达式转换成elasticsearch的aggregationbuilder的列表</span>        <span class="token keyword">return</span> <span class="token function">parseAggregationContext</span><span class="token punctuation">(</span>aggregateParser<span class="token punctuation">.</span><span class="token function">expr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">aggClause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>AggregationBuilder<span class="token operator">></span> <span class="token function">parseAggregationContext</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>AggregateParser<span class="token punctuation">.</span>AggClauseContext<span class="token operator">></span> aggClauseContexts<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建aggregationbuilder空列表</span>        List<span class="token operator">&lt;</span>AggregationBuilder<span class="token operator">></span> aggregationBuilders <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//是否支持聚类分页，默认值为false</span>        <span class="token keyword">boolean</span> hasCompositeAggregation <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建CompositeValuesSourceBuilder的列表</span>        List<span class="token operator">&lt;</span>CompositeValuesSourceBuilder<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> compositeValuesSourceBuilders <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建afterkey的map</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> afterKeys <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//对聚类表达式进行遍历</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>AggregateParser<span class="token punctuation">.</span>AggClauseContext aggClauseContext <span class="token operator">:</span> aggClauseContexts<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//如果聚类表达式形如(ip)，则调用AggregationBuilders.cardinality方法，并添加到聚类列表中</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>aggClauseContext<span class="token punctuation">.</span><span class="token function">cardinalityAggClause</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//获取聚类字段名</span>                String field <span class="token operator">=</span> aggClauseContext<span class="token punctuation">.</span><span class="token function">cardinalityAggClause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//将转换后的字段掺入AggregationBuilders.cardinality方法中</span>                aggregationBuilders<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>AggregationBuilders<span class="token punctuation">.</span><span class="token function">cardinality</span><span class="token punctuation">(</span>field <span class="token operator">+</span> <span class="token string">"_cardinality"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span>field<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//如果聚类表达式形如country after 湖南，则调用CompositeValuesSourceBuilder进行聚类分页</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>aggClauseContext<span class="token punctuation">.</span><span class="token function">termsAfterAggClause</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//获取字段值</span>                String field <span class="token operator">=</span> aggClauseContext<span class="token punctuation">.</span><span class="token function">termsAfterAggClause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>field<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//将是否聚类分页字段设置为true</span>                hasCompositeAggregation <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//获取after的值</span>                String after <span class="token operator">=</span> aggClauseContext<span class="token punctuation">.</span><span class="token function">termsAfterAggClause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>after<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//设置查询的名称</span>                String compositeField <span class="token operator">=</span> aggClauseContext<span class="token punctuation">.</span><span class="token function">termsAfterAggClause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>field<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"_composite"</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//生成聚类分页的实例</span>                CompositeValuesSourceBuilder sourceBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TermsValuesSourceBuilder</span><span class="token punctuation">(</span>compositeField<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span>field<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//添加到聚类分页的列表中</span>                compositeValuesSourceBuilders<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>sourceBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>                afterKeys<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>compositeField<span class="token punctuation">,</span> after<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//如果聚类表达式形如[coordinate]，则进行地理边框聚类</span>             <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>aggClauseContext<span class="token punctuation">.</span><span class="token function">geoBoundingBoxAggClause</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                 <span class="token comment" spellcheck="true">//获取地理字段的值</span>                String field <span class="token operator">=</span> aggClauseContext<span class="token punctuation">.</span><span class="token function">geoBoundingBoxAggClause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//添加到聚类列表中</span>                aggregationBuilders<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>AggregationBuilders<span class="token punctuation">.</span><span class="token function">geoBounds</span><span class="token punctuation">(</span>field <span class="token operator">+</span> <span class="token string">"_geoBound"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span>field<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>             <span class="token comment" spellcheck="true">//如果聚类表达式形如ip，则对其进行桶聚类</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>aggClauseContext<span class="token punctuation">.</span><span class="token function">termsAggClause</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//将转换后的桶聚类实例添加到聚类列表中</span>                aggregationBuilders<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">parseTermsAggregationContext</span><span class="token punctuation">(</span>aggClauseContext<span class="token punctuation">.</span><span class="token function">termsAggClause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//如果请求中存在聚类分页</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>hasCompositeAggregation<span class="token punctuation">)</span> <span class="token punctuation">{</span>            CompositeAggregationBuilder composite <span class="token operator">=</span> AggregationBuilders<span class="token punctuation">.</span><span class="token function">composite</span><span class="token punctuation">(</span><span class="token string">"composites"</span><span class="token punctuation">,</span> compositeValuesSourceBuilders<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//则设置聚类分页的值，但每次请求只支持一个字段进行分页</span>            composite<span class="token punctuation">.</span><span class="token function">aggregateAfter</span><span class="token punctuation">(</span>afterKeys<span class="token punctuation">)</span><span class="token punctuation">;</span>            aggregationBuilders<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>composite<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>compositeValuesSourceBuilders<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"暂不支持多字段分页功能"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> aggregationBuilders<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//解析桶聚类表达式，形如ip</span>    <span class="token keyword">private</span> AggregationBuilder <span class="token function">parseTermsAggregationContext</span><span class="token punctuation">(</span>AggregateParser<span class="token punctuation">.</span>TermsAggClauseContext termsAggClauseContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取字段名</span>        String field <span class="token operator">=</span> termsAggClauseContext<span class="token punctuation">.</span>field<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//生成桶聚类实例</span>        AggregationBuilder aggregationBuilder <span class="token operator">=</span> AggregationBuilders<span class="token punctuation">.</span><span class="token function">terms</span><span class="token punctuation">(</span>field <span class="token operator">+</span> <span class="token string">"_terms"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span>field<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>termsAggClauseContext<span class="token punctuation">.</span><span class="token function">termsAggClause</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//如果桶聚类下有子聚类，则添加子聚类</span>            aggregationBuilder<span class="token punctuation">.</span><span class="token function">subAggregation</span><span class="token punctuation">(</span><span class="token function">parseTermsAggregationContext</span><span class="token punctuation">(</span>termsAggClauseContext<span class="token punctuation">.</span><span class="token function">termsAggClause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> aggregationBuilder<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-将查询语句转换成Elasticsearch-DSL"><a href="#7-将查询语句转换成Elasticsearch-DSL" class="headerlink" title="(7). 将查询语句转换成Elasticsearch DSL"></a>(7). 将查询语句转换成Elasticsearch DSL</h4><blockquote><p>在main方法(或其他调用解析器的方法)中</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    QueryParser queryParser<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">QueryParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//将搜索条件转换成QueryBuilder</span>    QueryBuilder queryBuilder <span class="token operator">=</span> queryParser<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"country:中国,province:湖南,city:张家界"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//然后将queryBuilder传给Elasticsearch进行查询</span>    <span class="token comment" spellcheck="true">//将聚类条件转换成List&lt;AggregationBuilder></span>    List<span class="token operator">&lt;</span>AggregationBuilder<span class="token operator">></span> aggregationBuilders <span class="token operator">=</span> queryParser<span class="token punctuation">.</span><span class="token function">parseAggregationExpr</span><span class="token punctuation">(</span><span class="token string">"country,(country),country>province>city,province after 湖南"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//然后将aggregationBuilders传给Elasticsearch进行聚类</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-推荐阅读"><a href="#6-推荐阅读" class="headerlink" title="6. 推荐阅读"></a>6. 推荐阅读</h3><p><a href="https://github.com/antlr/antlr4/blob/master/doc/index.md" target="_blank" rel="noopener">Antlr4官方指南</a><br><a href="https://github.com/antlr/grammars-v4" target="_blank" rel="noopener">Antlr4官方示例:Grammars-v4</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> antlr </category>
          
      </categories>
      
      
        <tags>
            
            <tag> antlr </tag>
            
            <tag> dsl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正议</title>
      <link href="2020/02/11/zheng-yi/"/>
      <url>2020/02/11/zheng-yi/</url>
      
        <content type="html"><![CDATA[<h3 id="正议"><a href="#正议" class="headerlink" title="正议"></a>正议</h3><p>昔在项羽，起不由德，虽处华夏，秉帝者之势，卒就汤镬，为后永戒。魏不审鉴，今次之矣;免身为幸，戒在子孙。而二三子各以耆艾之齿，承伪指而进书，有若崇、竦称莽之功，亦将偪于元祸苟免者邪!<br>昔世祖之创迹旧基，奋羸卒数千，摧莽强旅四十余万于昆阳之郊。夫据道讨淫，不在众寡。及至孟德，以其谲胜之力，举数十万之师，救张郃于阳平，势穷虑悔，仅能自脱，辱其锋锐之众，遂丧汉中之地，深知神器不可妄获，旋还未至，感毒而死。子桓淫逸，继之以篡。纵使二三子多逞苏、张诡靡之说，奉进驩兜滔天之辞，欲以诬毁唐帝，讽解禹、稷，所谓徒丧文藻烦劳翰墨者矣!夫大人君子之所不为也。又《军诫》曰:“万人必死，横行天下。”昔轩辕氏整卒数万，制四方，定海内，况以数十万之众，据正道而临有罪，可得干拟者哉!</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 诸葛亮 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诸葛亮 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>隆中对</title>
      <link href="2020/02/11/long-zhong-dui/"/>
      <url>2020/02/11/long-zhong-dui/</url>
      
        <content type="html"><![CDATA[<h3 id="隆中对"><a href="#隆中对" class="headerlink" title="隆中对"></a>隆中对</h3><p>亮躬耕陇亩，好为《梁父吟》。身长八尺，每自比于管仲、乐毅，时人莫之许也。惟博陵崔州平、颍川徐庶元直与亮友善，谓为信然。</p><p>时先主屯新野。徐庶见先主，先主器之，谓先主曰：“诸葛孔明者，卧龙也，将军岂愿见之乎？”先主曰：“君与俱来。”庶曰：“此人可就见，不可屈致也。将军宜枉驾顾之。”</p><p>由是先主遂诣亮，凡三往，乃见。因屏人曰：“汉室倾颓，奸臣窃命，主上蒙尘。孤不度德量力，欲信大义于天下，而智术浅短，遂用猖蹶，至于今日。然志犹未已，君谓计将安出？”</p><p>亮答曰：“自董卓已来，豪杰并起，跨州连郡者不可胜数。曹操比于袁绍，则名微而众寡，然操遂能克绍，以弱为强者，非惟天时，抑亦人谋也。今操已拥百万之众，挟天子而令诸侯，此诚不可与争锋。孙权据有江东，已历三世，国险而民附，贤能为之用，此可以为援而不可图也。荆州北据汉、沔，利尽南海，东连吴会，西通巴、蜀，此用武之国，而其主不能守，此殆天所以资将军，将军岂有意乎？益州险塞，沃野千里，天府之土，高祖因之以成帝业。刘璋暗弱，张鲁在北，民殷国富而不知存恤，智能之士思得明君。将军既帝室之胄，信义著于四海，总揽英雄，思贤如渴，若跨有荆、益，保其岩阻，西和诸戎，南抚夷越，外结好孙权，内修政理；天下有变，则命一上将将荆州之军以向宛、洛，将军身率益州之众出于秦川，百姓孰敢不箪食壶浆以迎将军者乎？诚如是，则霸业可成，汉室可兴矣。”</p><p>先主曰：“善！”于是与亮情好日密。</p><p>关羽、张飞等不悦，先主解之曰：“孤之有孔明，犹鱼之有水也。愿诸君勿复言。”羽、飞乃止。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 诸葛亮 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诸葛亮 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
